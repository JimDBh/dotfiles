#+title: Emacs configuration with Org Mode
#+author: Andrey Orst
#+email: andreyorst@gmail.com
#+setupfile: ~/.dotfiles/.org-defaults.org
#+startup: noinlineimages
#+property: header-args :tangle "~/.emacs.d/init.el"

[[file:.screenshot.png]]

This  is my  Emacs configuration  file written  as Org  document.  The
purpose of  this file  is to  provide convenient  way to  browse Emacs
configuration  with  expressive  comments,  and  references  to  other
people's work.

* About this document
This file is  my actual configuration file for Emacs.   I do all edits
here, then /compile/ it to =init.el=  file. It is convenient because Emacs
is complex tool,  so I can leave comments to  examine later by myself,
but I  don't need to keep  track over several files,  like in Kakoune,
where I try to manage configuration  and =readme= file. In case of Emacs
I really need  to work with this  file only since this  document *is* my
configuration file and a bunch of notes simultaneously.

I  try to  maintain my  Emacs  configuration simple,  fast, and  small
keeping as much  of vanilla Emacs behaviors  as I can, but  I'm a sane
person so  some aspects which  are actually  insane in my  opinion are
changed.

Now to the configuration itself.

* Configuration
As  I've  mentioned  earlier,  I'm  using  Org  Mode  function  called
=org-babel-tangle= to  build my =init.el=  file. This means that  you only
need this file  in order to get my Emacs  configuration and compile it
with =org-babel-tangle= function for the  first time.  After that, every
time this file is saved it gets re-tangled automatically.

Since I'm  trying to  follow Emacs conventions,  good Emacs  Lisp file
starts with commentary:

#+BEGIN_SRC emacs-lisp
  ;;; init.el --- Emacs main configuration file
  ;;;
  ;;; Commentary:
  ;;; Emacs config by Andrey Orst.
  ;;; This file was automatically generated by `org-babel-tangle'.
  ;;; Do not change this file.  Main config is located in .emacs.d/config.org
  ;;;
  ;;;  -*- lexical-binding: t; -*-
  ;;;
  ;;; Code:
#+END_SRC

After this  point configurations will  be split in  different sections
grouped by something common to them all.

** Startup
Emacs starts fast, but as amount of packages grows it gets slower. The
init time is important  because I like to close it  when I'm not using
it. I'm not  closing and opening it  for every file, of  like every 15
minutes, but still, the faster it starts - the better for me.

Once I switch  to Emacs 27 most  of these settings will  be tangled to
=early-init.el=.

*** Garbage collection and file handler
The  main  problem  with  Emacs startup  file  is  garbage  collection
system. It invoked  so many times on startup that  it causes quite big
impact on startup  time.  We're talking /seconds/.  One  can raise limit
when to trigger garbage collection, but this will end up in unpleasant
editing experience. So I'm declaring  these variables to store default
values for the GC, to restore them after initialization is finished:

#+BEGIN_SRC emacs-lisp
  (defvar my--gc-cons-threshold gc-cons-threshold)
  (defvar my--gc-cons-percentage gc-cons-percentage)
  (defvar my--file-name-handler-alist file-name-handler-alist)
#+END_SRC

Now we can tweak GC. We need to raise threshold to prevent it running:

#+BEGIN_SRC emacs-lisp
  (setq gc-cons-threshold 402653184
        gc-cons-percentage 0.6
        message-log-max 16384
        file-name-handler-alist nil)
#+END_SRC

Then we need  a hook that restores initial  values once initialization
done:

#+BEGIN_SRC emacs-lisp
  (add-hook 'after-init-hook
            (lambda ()
              (setq gc-cons-threshold my--gc-cons-threshold
                    gc-cons-percentage my--gc-cons-percentage
                    file-name-handler-alist my--file-name-handler-alist)))
#+END_SRC

** Default Behavior Fixes
Emacs is  old. I  understand that  back then  it could  be appropriate
decisions,  but as  of today  they are  completely obliterated  by the
passage of time.

I'm not  trying to  insult on anyone,  but usage of  the bell  is just
insane. It's  not 1980's, computers  have their own speakers  and rich
displays, why would anyone want  to use builtin speaker?  Why everyone
should know when I'm mistaken? Disable bell.

#+BEGIN_SRC emacs-lisp
  (setq ring-bell-function 'ignore)
#+END_SRC

I don't  know who decided  that having backups  all over the  place is
good idea, but I don't think alike.

#+BEGIN_SRC emacs-lisp
  (setq backup-by-copying t
        create-lockfiles nil
        backup-directory-alist '(("." . "~/.cache/emacs-backups"))
        auto-save-file-name-transforms '((".*" "~/.cache/emacs-backups" t)))
#+END_SRC

For some  reason in some  situations Emacs asks  for typing =yes=  or =no=
explicitly, instead of accepting =y= or =n=. This can be fixed with this.

#+BEGIN_SRC emacs-lisp
  (fset 'yes-or-no-p 'y-or-n-p)
#+END_SRC

Emacs displays pressed  key after some time but it's  too fast for me,
because I use Emacs on the phone  too, and the keyboard is a bit small
for lightning fast typing.

#+BEGIN_SRC emacs-lisp
  (add-hook 'after-init-hook (lambda () (setq echo-keystrokes 5)))
#+END_SRC

I don't want menus on shift clicks:

#+BEGIN_SRC emacs-lisp
  (global-unset-key (kbd "S-<down-mouse-1>"))
  (global-unset-key (kbd "<mouse-3>"))
  (global-unset-key (kbd "S-<mouse-3>"))
#+END_SRC

I  don't like  how  Emacs  handles scrolling,  and  that  it uses  tab
characters by default.  I need tab  characters only when I work with C
code and Makefile rules.

#+BEGIN_SRC emacs-lisp
  (setq-default indent-tabs-mode nil
                scroll-step 1
                scroll-conservatively 10000
                mouse-wheel-progressive-speed nil
                auto-window-vscroll nil)
#+END_SRC

I  don't like  custom,  and  especially would  like  to  stop it  from
interfering to  my configuration  files, so lets  move it  to separate
file.

#+BEGIN_SRC emacs-lisp
  (setq custom-file (expand-file-name "custom.el" user-emacs-directory))
  (load custom-file :noerror)
#+END_SRC

I also don't like that Emacs  has disabled commands, and enabling them
modifies  my =init.el=  that I  don't  modify myself.   Let's put  those
commands to =custom-file= instead:

#+BEGIN_SRC emacs-lisp
  (defadvice en/disable-command (around put-in-custom-file activate)
    "Put declarations in disabled.el."
    (let ((user-init-file (expand-file-name "disabled.el" user-emacs-directory)))
      ad-do-it))
#+END_SRC

Another feature I  want is history between sessions. I'm  not sure why
it isn't default.

#+BEGIN_SRC emacs-lisp
  (savehist-mode 1)
#+END_SRC

I use two keyboard layouts: =qwerty=  and =йцукен=, therefore I need a way
to switch between those without loosing  ability to use such chords as
=C-x=  which will  become  a =C-ч=  if  I select  Cyrillic  layout in  the
OS. Luckily for  me, Emacs provides a method to  switch layouts within
Emacs with =C-\=, so all common shortcuts will still work fine.

#+BEGIN_SRC emacs-lisp
  (setq default-input-method 'russian-computer)
#+END_SRC

I'm  not   using  =russian-jcuken=   here  because  it   represents  the
"typewriter" layout with number-line inverted,  so to access numbers I
need to use Shift key. =russian-computer= doesn't have this problem.

I  don't  find displaying  position  in  modeline really  great  idea,
because I need to move my eyes too much on big screen just to see what
line number I'm currently on.

#+BEGIN_SRC emacs-lisp
  (setq column-number-mode nil
        line-number-mode nil
        size-indication-mode nil
        mode-line-position nil)
#+END_SRC

I don't  want my files to  contain trailing whitespaces, so  this hook
will get rid of those automatically for me.

#+BEGIN_SRC emacs-lisp
  (add-hook 'before-save-hook 'delete-trailing-whitespace)
#+END_SRC

One thing  that bothered  me is  that =C-g= is  universal way  to cancel
things in Emacs, gut you have to  be in exact window to cancel action.
This  function  intelligently tries  to  cancel  regardless of  active
window:

#+BEGIN_SRC emacs-lisp
  ;; suppress byte-compiler warnings
  (declare-function minibuffer-keyboard-quit "delsel" (&optional ARGS))

  (defun my/escape ()
    "Quit in current context.

  When there is an active minibuffer and we are not inside it close
  it.  When we are inside the minibuffer use the regular
  `minibuffer-keyboard-quit' which quits any active region before
  exiting.  When there is no minibuffer `keyboard-quit' unless we
  are defining or executing a macro."
    (interactive)
    (cond ((active-minibuffer-window)
           (if (minibufferp)
               (minibuffer-keyboard-quit)
             (abort-recursive-edit)))
          (t
           ;; ignore top level quits for macros
           (unless (or defining-kbd-macro executing-kbd-macro)
             (keyboard-quit)))))
#+END_SRC

Let's remap default =keyboard-quit= key with this function.

#+BEGIN_SRC emacs-lisp
  (global-set-key [remap keyboard-quit] #'my/escape)
#+END_SRC

When using some commands that provide  prompt, like pushing to git, or
=eval-expression=,  there's  annoying message  =text  is  read only=  when
deleting past first symbol. Let's disable it:

#+BEGIN_SRC emacs-lisp
  (defun my/command-error-function (data context caller)
    "Ignore the `text-read-only' signal; pass the rest DATA CONTEXT CALLER to the default handler."
    (when (not (eq (car data) 'text-read-only))
      (command-error-default-function data context caller)))

  (setq command-error-function #'my/command-error-function)
#+END_SRC

** User Interface
Emacs displays splash screen once started  with no files. I don't need
it, and  I would like to  start with =*scratch*= buffer  instead. Also I
would  like =*scratch*=  buffer  to be  an Org  buffer  with no  initial
message:

#+BEGIN_SRC emacs-lisp
  (setq inhibit-splash-screen t
        initial-major-mode 'org-mode
        initial-scratch-message "")
#+END_SRC

I don't need  all these tooltips, menus and  scrollbars. Emacs enables
all of those by default, so let's disable them as early as possible:

#+BEGIN_SRC emacs-lisp
  (tooltip-mode -1)
  (menu-bar-mode -1)
  (fset 'menu-bar-open nil)

  (when window-system
    (scroll-bar-mode -1)
    (tool-bar-mode -1))
#+END_SRC

Also let's use bar cursor when in window system, which is visible only
in active window:

#+BEGIN_SRC emacs-lisp
    (when window-system
      (setq-default cursor-type 'bar
                    cursor-in-non-selected-windows nil))
#+END_SRC

Emacs uses weird method of naming a window, I'd like to see a file I'm
currently working  on in the task  bar in case my  Emacs was minimized
for some reason.

#+BEGIN_SRC emacs-lisp
  (setq-default frame-title-format '("%b — Emacs"))
#+END_SRC

Also,  why initial  frame size  is so  small? When  I launch  Emacs in
terminal it occupies  whole window.  When I launch  it under graphical
environment it defaults to really  small window, which is smaller than
my   terminal.   My   window  manager   doesn't  adjust   window  size
automatically so let's just set little bit bigger initial size:

#+BEGIN_SRC emacs-lisp
  (when window-system
    (set-frame-size (selected-frame) 190 52))
#+END_SRC

With this size I'm  able to fire up Emacs and get  enough space to fit
two vertically aligned windows and a file explorer together.

I like this  Adobe Source Code Pro  font. Even if I use  Hack in every
other editor, for some reason I find this font just right for Emacs.

#+BEGIN_SRC emacs-lisp
  (set-face-attribute 'default nil :font "Source Code Pro-10")
#+END_SRC

I want fringes  to appear only in certain buffers  where I really need
them, so let's  disable it entirely on startup and  set them with some
hooks later.

#+BEGIN_SRC emacs-lisp
  (when window-system
    (fringe-mode 0))
#+END_SRC

But this adds another problem. Emacs displays =$= sign at the end of the
window if line is being truncated. Damn,  why it is so hard to make it
work how I want.. And you can't simply set =standard-display-table= slot
to empty space, because it isn't ready on Emacs init.

#+BEGIN_SRC emacs-lisp
  (when window-system
    (or standard-display-table
        (setq standard-display-table (make-display-table)))
    (set-display-table-slot standard-display-table 0 ?\ ))
#+END_SRC

Small tweak  to mode  line, that disables  changing appearance  in non
active window.

#+BEGIN_SRC emacs-lisp
  (setq mode-line-in-non-selected-windows nil)
#+END_SRC

* Packages
This section lists package configurations managed by =use-package=.

** Package
To obtain  plugins we need  =package= package. Although this  is builtin
and convenient,  it's also  slow and messy.  Instead of  using =package=
directly we will use =use-package= to manage package configurations.

=package.el= initialization is expensive so we disable it at startup:

#+BEGIN_SRC emacs-lisp
  (setq package-enable-at-startup nil
        package--init-file-ensured t)
#+END_SRC

Melpa is a  package repository, that I use to  get packages. Since all
packages that  I need can  be obtained  from there, I  didn't bothered
with different methods of installation.

#+BEGIN_SRC emacs-lisp
  (setq package-archives
        '(("gnu" . "https://elpa.gnu.org/packages/")
          ("melpa" . "https://melpa.org/packages/")))
#+END_SRC

There's recent bug with downloading from elpa. This line fixes it:

#+BEGIN_SRC emacs-lisp
  (setq gnutls-algorithm-priority "NORMAL:-VERS-TLS1.3")
  (package-initialize)
#+END_SRC

** Use Package
I use =use-package= to install, load  and configure my packages.  I find
this way very consistent and easy  to understand and maintain.  What I
like  about it  is that  it automatically  installs packages  on Emacs
startup. But unfortunately it can't be installed by itself, so we need
a way  to install  Use Package  in case  I load  this config  on fresh
system.

#+BEGIN_SRC emacs-lisp
  (unless (package-installed-p 'use-package)
    (package-refresh-contents)
    (package-install 'use-package))
#+END_SRC

And =require= the package itself:

#+BEGIN_SRC emacs-lisp
  (eval-when-compile
    (require 'use-package)
    (setq use-package-always-ensure t))
#+END_SRC

All other packages were split to individual categories much like Emacs
settings above.   This helps me to  keep track of things  in different
packages and do not rely on search that much.

** User Interface Packages
All user interface related settings are presented in this section. I'm
big fan of  DOOM themes, and modeline,  so I'll refer to  them quite a
lot here.

*** All The Icons
This  package provides  nice icons  for Emacs  via custom  fonts. Just
don't forget to use =M-x all-the-icons-install-fonts RET= after install.

#+BEGIN_SRC emacs-lisp
  (use-package all-the-icons)
#+END_SRC

I don't use  this package directly yet, but some  other packages, like
DOOM Modeline or Treemacs.

*** DOOM Themes
This theme collection  was developed for [[https://github.com/hlissner/doom-emacs][DOOM Emacs]], and  I find these
themes actually great  on its own. This package  contains nice variant
of Atom-like One theme which I like,  but it is also an amazingly well
put package, which defines colors for pretty much everything in Emacs.
It also features Treemacs configuration, which  is nice, but I want to
change a little bit of it.

#+BEGIN_SRC emacs-lisp
  (use-package doom-themes
    :commands (doom-themes-org-config)
    :config
    (doom-themes-org-config)
    (setq doom-themes-enable-bold t
          doom-themes-enable-italic t)
    :init (load-theme 'doom-one t))
#+END_SRC

Emacs uses  white titlebar, but  since I'm  using dark color  scheme I
want title bar  to be dark as  well. It is quite  difficult to achieve
this in GNOME Shell, but I found this code [[https://nicolas.petton.fr/blog/emacs-dark-window-decoration.html][on the internet]]:

#+BEGIN_SRC emacs-lisp
  (defun my/set-frame-dark (&optional frame)
    "Set FRAME titlebar colorscheme to dark variant."
    (with-selected-frame (or frame (selected-frame))
      (call-process-shell-command
       (format "xprop -f _GTK_THEME_VARIANT 8u -set _GTK_THEME_VARIANT \"dark\" -name \"%s\""
               (frame-parameter frame 'name)))))
#+END_SRC

So  if  I  use  =window-system=  I want  this  function  to  run  during
initialization process, and when new frame is created.

#+BEGIN_SRC emacs-lisp
  (when window-system
    (my/set-frame-dark)
    (add-hook 'after-make-frame-functions 'my/set-frame-dark :after))
#+END_SRC

*** Solaire Mode
This  package helps  distinguish  buffers that  have  file opened  and
buffers that  are for utilities  like file  browser. Also it  has cool
name! =\[T]/=

I really want  Solaire to treat =*scratch*= buffer as  real.  For that I
need to define my  own function that will decide if  buffer is real or
not:

#+BEGIN_SRC emacs-lisp
  (defun my/real-buffer-p ()
    "Determines whether buffer is real."
    (or (and (not (minibufferp))
             (buffer-file-name))
        (string-equal (buffer-name) "*scratch*")))
#+END_SRC

Now  we  can  set  up  Solaire Mode  and  assign  =my/real-buffer-p=  to
=solaire-mode-real-buffer-fn=.

#+BEGIN_SRC emacs-lisp
  (use-package solaire-mode
    :commands (solaire-global-mode
               solaire-mode-swap-bg
               turn-on-solaire-mode
               solaire-mode-in-minibuffer
               solaire-mode-reset)
    :config
    (setq solaire-mode-real-buffer-fn #'my/real-buffer-p)
    (solaire-mode-swap-bg)
    (cond ((not (boundp 'after-focus-change-function))
           (add-hook 'focus-in-hook  #'solaire-mode-reset))
          (t
           (add-function :after after-focus-change-function #'solaire-mode-reset)))
    (add-hook 'after-revert-hook #'turn-on-solaire-mode)
    (add-hook 'change-major-mode-hook #'turn-on-solaire-mode)
    (add-hook 'org-capture-mode-hook #'turn-on-solaire-mode :after)
    (add-hook 'org-src-mode-hook #'turn-on-solaire-mode :after)
    :init (solaire-global-mode +1))
#+END_SRC

If only  certain buffers  could +be so  grossly incandescent+  *have damn
fringes!* With  this package  Emacs becomes way  more like  true editor
with  actual   graphical  interface,   but  these  fringes   drive  me
crazy. That's why I wrote this  function, that enables fringes only in
buffers that are affected by Solaire Mode:

#+BEGIN_SRC emacs-lisp
  (defun my/real-buffer-setup (&rest _)
    "Wrapper around `set-window-fringes' function."
    (when (my/real-buffer-p)
      (set-window-fringes nil 8 8 nil)
      (when (and (fboundp 'doom-color)
                 window-system)
        (set-face-attribute 'line-number-current-line nil
                            :foreground (doom-color 'fg-alt)
                            :background (doom-color 'bg)))
      (setq-local scroll-margin 3)))
#+END_SRC

Let's assign it to these hooks:

#+BEGIN_SRC emacs-lisp
  (add-hook 'window-configuration-change-hook 'my/real-buffer-setup)
  (add-hook 'org-capture-mode-hook 'my/real-buffer-setup)
  (add-hook 'org-src-mode-hook 'my/real-buffer-setup)
#+END_SRC

*** DOOM Modeline
I've tried bunch of different modelines:

- [[https://github.com/TheBB/spaceline][Spaceline]]
  Great modeline, but  I was experiencing slowdowns  in Emacs startup,
  and I like my Emacs to start fast.
- [[https://github.com/dbordak/telephone-line][Telephone Line]]
  Another good modeline, but I was lazy to configure it.
- [[https://github.com/milkypostman/powerline][Powerline]]
  This was first what I tried because I was using something similar in
  Vim. I don't remember why I dropped it.
- [[https://github.com/tarsius/moody][Moody]]
  Really lightweight  configuration for  default modeline,  which I've
  used for quite a some time.

They're all  great, but  I esperienced some  troubles with  DOOM Theme
that I use, so  I've decided to try out DOOM  Modeline.  And turns out
it's great!

#+BEGIN_SRC emacs-lisp
  (use-package doom-modeline
    :commands (doom-modeline-mode
               doom-modeline-set-selected-window
               doom-modeline-lsp-icon)
    :functions (doom-color)
    :config
    (dolist (face '(doom-modeline-buffer-modified
                    doom-modeline-buffer-minor-mode
                    doom-modeline-project-parent-dir
                    doom-modeline-project-dir
                    doom-modeline-project-root-dir
                    doom-modeline-highlight
                    doom-modeline-debug
                    doom-modeline-info
                    doom-modeline-warning
                    doom-modeline-urgent
                    doom-modeline-unread-number
                    doom-modeline-buffer-path
                    doom-modeline-bar
                    doom-modeline-panel
                    doom-modeline-buffer-major-mode
                    doom-modeline-buffer-file
                    doom-modeline-lsp-success
                    doom-modeline-lsp-warning
                    doom-modeline-lsp-error))
      (set-face-attribute face nil :foreground (doom-color 'fg) :weight 'normal))
    (set-face-attribute 'doom-modeline-buffer-file nil :weight 'semi-bold)
    (set-face-attribute 'doom-modeline-buffer-major-mode nil :weight 'semi-bold)
    (set-face-attribute 'doom-modeline-panel nil :background (doom-color 'bg-alt))
    (set-face-attribute 'doom-modeline-bar nil :background (doom-color 'bg-alt))
    (setq doom-modeline-bar-width 3
          doom-modeline-major-mode-color-icon nil
          doom-modeline-buffer-file-name-style 'file-name
          doom-modeline-minor-modes t
          find-file-visit-truename t)
    :init (doom-modeline-mode 1))
#+END_SRC

I guess that this is all for DOOM  packages for now, but I have to say
that I really  appreciate *[[https://github.com/hlissner][@hlissner]]* work. These  packages already make
Emacs look outstanding.

*** Treemacs
To make Emacs look more like  a traditional modern text editor we need
a file explorer.  Emacs has  builtin package for this, named =speedbar=,
but It uses external frame and has  so many features that I don't know
if I really need. With this package, and its supplement packages I can
have a consistent  filetree inside my Emacs frame. Which  is good. But
there's more:  DOOM Themes support  this package as well,  which means
that Treemacs will look just as great as DOOM themed Emacs!

#+BEGIN_SRC emacs-lisp
  (when window-system
    (use-package treemacs
      :commands (treemacs
                 treemacs-follow-mode
                 treemacs-filewatch-mode
                 treemacs-fringe-indicator-mode
                 treemacs--expand-root-node
                 treemacs--maybe-recenter
                 treemacs-TAB-action
                 treemacs-load-theme
                 treemacs-toggle-fixed-width)
      :functions (my/treemacs-expand-all-projects
                  my/treemacs-variable-pitch-labels
                  my/tremacs-init-setup
                  my/treemacs-setup
                  my/treemacs-setup-fringes
                  doom-color
                  all-the-icons-octicon)
      :bind (("<f7>" . treemacs)
             ("<f8>" . treemacs-select-window))
      :hook (after-init . my/treemacs-init-setup)
      :config
      (use-package treemacs-magit)
      (set-face-attribute 'treemacs-root-face nil
                          :foreground (doom-color 'fg)
                          :height 1.0
                          :weight 'normal)
      (treemacs-create-theme "Atom"
        :config
        (progn
          (treemacs-create-icon
           :icon (format " %s\t"
                         (all-the-icons-octicon
                          "repo"
                          :v-adjust -0.1
                          :face '(:inherit font-lock-doc-face :slant normal)))
           :extensions (root))
          (treemacs-create-icon
           :icon (format "%s\t%s\t"
                         (all-the-icons-octicon
                          "chevron-down"
                          :height 0.75
                          :v-adjust 0.1
                          :face '(:inherit font-lock-doc-face :slant normal))
                         (all-the-icons-octicon
                          "file-directory"
                          :v-adjust 0
                          :face '(:inherit font-lock-doc-face :slant normal)))
           :extensions (dir-open))
          (treemacs-create-icon
           :icon (format "%s\t%s\t"
                         (all-the-icons-octicon
                          "chevron-right"
                          :height 0.75
                          :v-adjust 0.1
                          :face '(:inherit font-lock-doc-face :slant normal))
                         (all-the-icons-octicon
                          "file-directory"
                          :v-adjust 0
                          :face '(:inherit font-lock-doc-face :slant normal)))
           :extensions (dir-closed))
          (treemacs-create-icon
           :icon (format "%s\t%s\t"
                         (all-the-icons-octicon
                          "chevron-down"
                          :height 0.75
                          :v-adjust 0.1
                          :face '(:inherit font-lock-doc-face :slant normal))
                         (all-the-icons-octicon
                          "package"
                          :v-adjust 0
                          :face '(:inherit font-lock-doc-face :slant normal)))
           :extensions (tag-open))
          (treemacs-create-icon
           :icon (format "%s\t%s\t"
                         (all-the-icons-octicon
                          "chevron-right"
                          :height 0.75
                          :v-adjust 0.1
                          :face '(:inherit font-lock-doc-face :slant normal))
                         (all-the-icons-octicon
                          "package"
                          :v-adjust 0
                          :face '(:inherit font-lock-doc-face :slant normal)))
           :extensions (tag-closed))
          (treemacs-create-icon
           :icon (format "%s\t"
                         (all-the-icons-octicon
                          "tag"
                          :height 0.9
                          :v-adjust 0
                          :face '(:inherit font-lock-doc-face :slant normal)))
           :extensions (tag-leaf))
          (treemacs-create-icon
           :icon (format "%s\t"
                         (all-the-icons-octicon
                          "flame"
                          :v-adjust 0
                          :face '(:inherit font-lock-doc-face :slant normal)))
           :extensions (error))
          (treemacs-create-icon
           :icon (format "%s\t"
                         (all-the-icons-octicon
                          "stop"
                          :v-adjust 0
                          :face '(:inherit font-lock-doc-face :slant normal)))
           :extensions (warning))
          (treemacs-create-icon
           :icon (format "%s\t"
                         (all-the-icons-octicon
                          "info"
                          :height 0.75
                          :v-adjust 0.1
                          :face '(:inherit font-lock-doc-face :slant normal)))
           :extensions (info))
          (treemacs-create-icon
           :icon (format "  %s\t"
                         (all-the-icons-octicon
                          "file-media"
                          :v-adjust 0
                          :face '(:inherit font-lock-doc-face :slant normal)))
           :extensions ("png" "jpg" "jpeg" "gif" "ico" "tif" "tiff" "svg" "bmp"
                        "psd" "ai" "eps" "indd" "mov" "avi" "mp4" "webm" "mkv"
                        "wav" "mp3" "ogg" "midi"))
          (treemacs-create-icon
           :icon (format "  %s\t"
                         (all-the-icons-octicon
                          "file-code"
                          :v-adjust 0
                          :face '(:inherit font-lock-doc-face :slant normal)))
           :extensions ("yml" "yaml" "sh" "zsh" "fish" "c" "h" "cpp" "cxx" "hpp"
                        "tpp" "cc" "hh" "hs" "lhs" "cabal" "py" "pyc" "rs" "el"
                        "elc" "clj" "cljs" "cljc" "ts" "tsx" "vue" "css" "html"
                        "htm" "dart" "java" "kt" "scala" "sbt" "go" "js" "jsx"
                        "hy" "json" "jl" "ex" "exs" "eex" "ml" "mli" "pp" "dockerfile"
                        "vagrantfile" "j2" "jinja2" "tex" "racket" "rkt" "rktl" "rktd"
                        "scrbl" "scribble" "plt" "makefile" "elm" "xml" "xsl" "rb"
                        "scss" "lua" "lisp" "scm" "sql" "toml" "nim" "pl" "pm" "perl"
                        "vimrc" "tridactylrc" "vimperatorrc" "ideavimrc" "vrapperrc"
                        "cask" "r" "re" "rei" "bashrc" "zshrc" "inputrc" "editorconfig"
                        "gitconfig"))
          (treemacs-create-icon
           :icon (format "  %s\t"
                         (all-the-icons-octicon
                          "book"
                          :v-adjust 0
                          :face '(:inherit font-lock-doc-face :slant normal)))
           :extensions ("lrf" "lrx" "cbr" "cbz" "cb7" "cbt" "cba" "chm" "djvu"
                        "doc" "docx" "pdb" "pdb" "fb2" "xeb" "ceb" "inf" "azw"
                        "azw3" "kf8" "kfx" "lit" "prc" "mobi" "exe" "or" "html"
                        "pkg" "opf" "txt" "pdb" "ps" "rtf" "pdg" "xml" "tr2"
                        "tr3" "oxps" "xps"))
          (treemacs-create-icon
           :icon (format "  %s\t" (all-the-icons-octicon
                                   "file-text"
                                   :v-adjust 0
                                   :face '(:inherit font-lock-doc-face :slant normal)))
           :extensions ("md" "markdown" "rst" "log" "org" "txt"
                        "CONTRIBUTE" "LICENSE" "README" "CHANGELOG"))
          (treemacs-create-icon
           :icon (format "  %s\t" (all-the-icons-octicon
                                   "file-binary"
                                   :v-adjust 0
                                   :face '(:inherit font-lock-doc-face :slant normal)))
           :extensions ("exe" "dll" "obj" "so" "o" "out"))
          (treemacs-create-icon
           :icon (format "  %s\t" (all-the-icons-octicon
                                   "file-pdf"
                                   :v-adjust 0
                                   :face '(:inherit font-lock-doc-face :slant normal)))
           :extensions ("pdf"))
          (treemacs-create-icon
           :icon (format "  %s\t" (all-the-icons-octicon
                                   "file-zip"
                                   :v-adjust 0
                                   :face '(:inherit font-lock-doc-face :slant normal)))
           :extensions ("zip" "7z" "tar" "gz" "rar" "tgz"))
          (treemacs-create-icon
           :icon (format "  %s\t" (all-the-icons-octicon
                                   "file-text"
                                   :v-adjust 0
                                   :face '(:inherit font-lock-doc-face :slant normal)))
           :extensions (fallback))))
      (add-hook 'treemacs-mode-hook #'my/treemacs-setup)
      (advice-add #'treemacs-select-window :after #'my/treemacs-setup-fringes)

      (defun my/treemacs-expand-all-projects (&optional _)
        "Expand all projects."
        (save-excursion
          (treemacs--forget-last-highlight)
          (dolist (project (treemacs-workspace->projects (treemacs-current-workspace)))
            (-when-let (pos (treemacs-project->position project))
              (when (eq 'root-node-closed (treemacs-button-get pos :state))
                (goto-char pos)
                (treemacs--expand-root-node pos)))))
        (treemacs--maybe-recenter 'on-distance))
      (defun my/treemacs-variable-pitch-labels (&rest _)
        (dolist (face '(treemacs-root-face
                        treemacs-git-unmodified-face
                        treemacs-git-modified-face
                        treemacs-git-renamed-face
                        treemacs-git-ignored-face
                        treemacs-git-untracked-face
                        treemacs-git-added-face
                        treemacs-git-conflict-face
                        treemacs-directory-face
                        treemacs-directory-collapsed-face
                        treemacs-file-face
                        treemacs-tags-face))
          (let ((faces (face-attribute face :inherit nil)))
            (set-face-attribute
             face nil :inherit
             `(variable-pitch ,@(delq 'unspecified (if (listp faces) faces (list faces))))))))
      (defun my/treemacs-init-setup ()
        "Set treemacs theme, open treemacs, and expand all projects."
        (treemacs-load-theme "Atom")
        (treemacs)
        (my/treemacs-expand-all-projects))
      (defun my/treemacs-setup ()
        "Set treemacs buffer common settings."
        (setq tab-width 1
              mode-line-format nil
              line-spacing 5)
        (set-window-fringes nil 0 0 nil)
        (my/treemacs-variable-pitch-labels))
      (defun my/treemacs-setup-fringes ()
        "Set treemacs buffer fringes."
        (set-window-fringes nil 0 0 nil)
        (my/treemacs-variable-pitch-labels))
      (setq treemacs-width 27
            treemacs-is-never-other-window t
            treemacs-space-between-root-nodes nil)
      (treemacs-follow-mode t)
      (treemacs-filewatch-mode t)
      (treemacs-fringe-indicator-mode nil)))
#+END_SRC

Before using Treemacs I was a  happy user of another filetree package:
[[https://github.com/jaypei/emacs-neotree][Neotree]]. Unfortunately, last  commit to this package dates  to Nov 21,
2018, and since then there were no maintenance, and I was experiencing
a bug which made me move to Treemacs.

*** Eyebrowse
This  package imitates  virtual workspaces,  or virtual  frames inside
single Emacs  frame. This  is really  useful, when  you have  bunch of
windows, and you  want to open new  set but don't want  to loose other
window configurations. It works much like Vim tabs, or Tmux windows.

#+BEGIN_SRC emacs-lisp
  (use-package eyebrowse
    :commands eyebrowse-mode
    :init (eyebrowse-mode t))
#+END_SRC

*** Diff HL Mode
This package  provides nice way  of diffing buffers. It  displays thin
bar inside fringe marking unstaged changes. But I don't quite like how
it looks.  So there's another  thing that  I borrowed from  DOOM Emacs
configuration. This function sets  fringe diff highlighting bitmaps to
get nice looking thin vertical bars which play nicely with DOOM Themes
and DOOM Modeline.

#+BEGIN_SRC emacs-lisp
  (when window-system
    (use-package diff-hl
      :commands (global-diff-hl-mode
                 diff-hl-flydiff-mode
                 diff-hl-margin-mode)
      :hook ((diff-hl-mode . my/setup-fringe-bitmaps)
             (magit-post-refresh . diff-hl-magit-post-refresh))
      :config
      (defun my/setup-fringe-bitmaps ()
        "Set fringe bitmaps."
        (define-fringe-bitmap 'diff-hl-bmp-top [224] nil nil '(center repeated))
        (define-fringe-bitmap 'diff-hl-bmp-middle [224] nil nil '(center repeated))
        (define-fringe-bitmap 'diff-hl-bmp-bottom [224] nil nil '(center repeated))
        (define-fringe-bitmap 'diff-hl-bmp-insert [224] nil nil '(center repeated))
        (define-fringe-bitmap 'diff-hl-bmp-single [224] nil nil '(center repeated))
        (define-fringe-bitmap 'diff-hl-bmp-delete [240 224 192 128] nil nil 'top))
      (diff-hl-flydiff-mode t)
      :init (global-diff-hl-mode 1)))
#+END_SRC

*** Minions
This  package  implements   a  menu  that  lists   all  enabled  minor
modes. Emacs mode  line can become pretty long, so  this can be handy,
and perhaps I don't need to use =:diminish= everywhere anymore.

#+BEGIN_SRC emacs-lisp
  (use-package minions
    :commands minions-mode
    :init (minions-mode 1))
#+END_SRC

*** Window Divider
This package changes  window dividers appearance.  I want  to set them
to be  only 1 pixel  wide because if this  mode is turned  on, fringes
don't loose 1 pixel of width.

#+BEGIN_SRC emacs-lisp
  (when window-system
    (setq window-divider-default-right-width 1)
    (window-divider-mode 1))
#+END_SRC

*** Centaur Tabs
This  package  adds  tabs  over  main  windows,  that  display  opened
buffers. It's good for navigation with the mouse, and looks fancy.

#+BEGIN_SRC emacs-lisp
  (when window-system
    (use-package centaur-tabs
      :demand
      :hook ((dashboard-mode . centaur-tabs-local-mode)
             (term-mode . centaur-tabs-local-mode)
             (calendar-mode . centaur-tabs-local-mode)
             (org-agenda-mode . centaur-tabs-local-mode)
             (helpful-mode . centaur-tabs-local-mode)
             (imenu-list-major-mode . centaur-tabs-local-mode))
      :config
      (global-set-key (kbd "C-c n") 'centaur-tabs-forward)
      (global-set-key (kbd "C-c p") 'centaur-tabs-backward)
      (setq centaur-tabs-set-modified-marker t
            centaur-tabs-modified-marker "●"
            centaur-tabs-cycle-scope 'tabs
            centaur-tabs-height 32
            centaur-tabs-style "bar")
      (set-face-attribute 'centaur-tabs-close-mouse-face nil :underline nil)
      (set-face-attribute 'centaur-tabs-selected nil :weight 'bold)
      (defun centaur-tabs-buffer-groups ()
        "Use as few groups as possible."
        (list (cond ((string-equal "*" (substring (buffer-name) 0 1))
                     (cond ((string-match-p (regexp-quote "eglot") (buffer-name)) "Eglot")
                           ((or (string-match-p (regexp-quote "repl") (buffer-name))
                                (string-match-p (regexp-quote "geiser") (buffer-name))) "Geiser")
                           (t "Tools")))
                    ((string-match-p (regexp-quote "magit") (buffer-name)) "Magit")
                    (t "Default"))))
      (centaur-tabs-mode)))
#+END_SRC

** Modes
In Emacs  world Modes  are the  main thing. I'm  using Org  Mode quite
heavily right now, as well as  a lot of other modes. Configurations of
these modes are stored here.

*** Org Mode
Org  Mode is  a great  mode for  taking notes,  managing to-do  lists,
writing books, literate programming, and  many other things. I primary
use it for taking notes on different programming languages, and manage
my Emacs configuration with it.

#+BEGIN_SRC emacs-lisp
  (use-package org
    :ensure nil
    :defines default-justification
    :hook ((org-mode . flyspell-mode)
           (org-mode . auto-fill-mode)
           (after-save . my/org-tangle-on-config-save)
           (org-babel-after-execute . my/org-update-inline-images)
           (org-mode . my/org-init-setup))
    :bind (:map org-mode-map
                ([backtab] . nil)
                ([S-iso-lefttab] . nil)
                ([C-tab] . org-shifttab))
    :config
    (use-package ox-latex
      :ensure nil)
    (setq org-startup-with-inline-images t
          org-startup-folded 'content
          org-hide-emphasis-markers t
          org-adapt-indentation nil
          org-hide-leading-stars t
          org-highlight-latex-and-related '(latex)
          revert-without-query '(".*\.pdf")
          org-preview-latex-default-process 'dvisvgm
          org-src-fontify-natively t
          org-preview-latex-image-directory ".ltximg/"
          org-latex-listings 'minted
          org-latex-pdf-process '("pdflatex -shell-escape -interaction nonstopmode -output-directory %o %f"
                                  "pdflatex -shell-escape -interaction nonstopmode -output-directory %o %f"
                                  "pdflatex -shell-escape -interaction nonstopmode -output-directory %o %f")
          org-confirm-babel-evaluate nil)
    (defun my/org-tangle-on-config-save ()
      "Tangle source code blocks when configuration file is saved."
      (when (string= buffer-file-name (file-truename "~/.emacs.d/config.org"))
        (org-babel-tangle)))
    (defun my/org-update-inline-images ()
      "Update inline images in Org-mode."
      (when org-inline-image-overlays
        (org-redisplay-inline-images)))
    (defun my/org-init-setup ()
      "Set buffer local values."
      (setq default-justification 'full))
    (defvar minted-cache-dir
      (file-name-as-directory
       (expand-file-name ".minted/\\jombname"
                         temporary-file-directory)))
    (add-to-list 'org-latex-packages-alist
                 `(,(concat "cachedir=" minted-cache-dir)
                   "minted" nil))
    (add-to-list 'org-latex-logfiles-extensions "tex")
    (org-babel-do-load-languages
     'org-babel-load-languages
     '((gnuplot . t)
       (scheme . t)))
    (add-to-list 'org-latex-classes
                 '("article"
                   "\\documentclass{article}"
                   ("\\section{%s}" . "\\section*{%s}")
                   ("\\subsection{%s}" . "\\subsection*{%s}")
                   ("\\subsubsection{%s}" . "\\subsubsection*{%s}")
                   ("\\subsubsection{%s}" . "\\subsubsection*{%s}")
                   ("\\subsubsection{%s}" . "\\subsubsection*{%s}")
                   ("\\subsubsection{%s}" . "\\subsubsection*{%s}")
                   ("\\subsubsection{%s}" . "\\subsubsection*{%s}")
                   ("\\subsubsection{%s}" . "\\subsubsection*{%s}")
                   ("\\subsubsection{%s}" . "\\subsubsection*{%s}")
                   ("\\subsubsection{%s}" . "\\subsubsection*{%s}"))))
#+END_SRC

*** Doc View Mode
Default resolution is too low:

#+BEGIN_SRC emacs-lisp
  (setq-default doc-view-resolution 192)
#+END_SRC

*** Display Line Numbers Mode
This mode provides line numbers on  the left side of the window, which
doesn't lag. I don't like that it changes width, so let's change it:

#+BEGIN_SRC emacs-lisp
  (setq-default display-line-numbers-grow-only t
                display-line-numbers-width-start t)
#+END_SRC

*** Prog Mode
This isn't really a configuration of  Prog Mode itself, but some hooks
that change how  programming related modes behave. One  feature that I
think is really important, especially  when working with lisp code, is
ability  to see  matching bracket  when cursor  stands near  the other
bracket. So I enable it for every programming language.

#+BEGIN_SRC emacs-lisp
    (use-package prog-mode
      :ensure nil
      :hook ((prog-mode . show-paren-mode)
             (prog-mode . electric-pair-mode)
             (prog-mode . display-line-numbers-mode)))
#+END_SRC

*** CC Mode
These settings are for editing C source files.

#+BEGIN_SRC emacs-lisp
  (use-package cc-mode
    :ensure nil
    :config
    (defun my/cc-mode-setup ()
      (setq c-basic-offset 4
            c-default-style "linux"
            indent-tabs-mode t
            tab-width 4))
    :hook (c-mode-common . my/cc-mode-setup))

#+END_SRC

*** Markdown Mode
Sometimes I need to edit Markdown documents, so this package is handy.
For markdown  mode I would like  to have automatic spell  checking and
filling. Basically the same setup as for Org Mode.

#+BEGIN_SRC emacs-lisp
  (use-package markdown-mode
    :mode (("README\\.md\\'" . gfm-mode)
           ("\\.md\\'" . markdown-mode)
           ("\\.markdown\\'" . markdown-mode))
    :config (defvar markdown-command "multimarkdown")
    (defun my/markdown-setup ()
      "Set buffer local variables."
      (setq fill-column 80
            default-justification 'left))
    :hook ((markdown-mode . flyspell-mode)
           (markdown-mode . auto-fill-mode)
           (markdown-mode . my/markdown-setup)))
#+END_SRC

*** Rust Mode
I'd like to  have Rust syntax highlighting and  some basic facilities,
since I'm  planning to write my  exercises in org mode.   Since I make
notes in Org-mode, and  I started to use it for Rust  too, I need some
settings for Rust mode.

#+BEGIN_SRC emacs-lisp
  (use-package rust-mode
    :commands (rust-format-buffer)
    :hook (rust-mode . electric-pair-mode)
    :bind (:map rust-mode-map
                ("C-c C-f" . rust-format-buffer)))
#+END_SRC

This also means  that I could use something  to automatically complete
Rust  language facilities.   Rust ecosystem  provides two  options for
that:  [[https://github.com/racer-rust/emacs-racer][Racer]], and  [[https://github.com/rust-lang/rls][RLS]].   I'm planning  to use  Racer  when RLS  isn't
possible to use, like in Org Mode.

#+BEGIN_SRC emacs-lisp
  (when (executable-find "racer")
    (use-package racer
      :hook (racer-mode . eldoc-mode)
      :config (defun org-babel-edit-prep:rust (&optional _babel-info)
                "Run racer mode for Org Babel."
                (racer-mode 1))))
#+END_SRC

There's also a package for [[https://github.com/kwrooijen/cargo.el][Cargo]] integration:

#+BEGIN_SRC emacs-lisp
  (when (executable-find "cargo")
    (use-package cargo
      :hook (rust-mode . cargo-minor-mode)))
#+END_SRC

*** TOML Mode
=toml-mode= helps  with highlighting of  TOML files, which Rust  uses to
configure project.

#+BEGIN_SRC emacs-lisp
  (use-package toml-mode)
#+END_SRC

*** Racket Mode
Racket is nice LISP/Scheme language that I might to get into.

#+BEGIN_SRC emacs-lisp
  (use-package racket-mode
    :mode ("\\.rkt\\'" . racket-mode)
    :config
    (when (fboundp 'doom-color)
      (progn
        (set-face-attribute 'racket-debug-break-face nil :background (doom-color 'red) :foreground "#000000")
        (set-face-attribute 'racket-debug-result-face nil :foreground (doom-color 'grey) :box nil)
        (set-face-attribute 'racket-debug-locals-face nil :foreground (doom-color 'grey) :box nil)
        (set-face-attribute 'racket-selfeval-face nil :foreground (doom-color 'fg)))))
#+END_SRC

** Tools
Additional  packages  that  change  how Emacs  works,  providing  more
comfortable user experience.

*** Ansi Term
I'm using  it more  and more,  so I've  decided that  I should  have a
proper shortcut  for it.  =my/ansi-term-toggle= function  toggles bottom
split with =ansi-term= inside it.  /Ctrl+`/ seems great shortcut for this.
Also, when I exit terminal, I'd like to kill its window automatically.

#+BEGIN_SRC emacs-lisp
  (use-package term
    :ensure nil
    :bind ("C-`" . my/ansi-term-toggle)
    :config
    (defun my/ansi-term-toggle ()
      "Toggle `ansi-term' window on and off with the same command."
      (interactive)
      (cond ((get-buffer-window "*ansi-term*")
             (ignore-errors (delete-window
                             (get-buffer-window "*ansi-term*"))))
            (t (split-window-below)
               (other-window 1)
               (cond ((get-buffer "*ansi-term*")
                      (switch-to-buffer "*ansi-term*"))
                     (t (ansi-term "bash")
                        (set-frame-font "Hack" t))))))
    (defun my/autokill-when-no-processes (&rest _)
      "Kill buffer and its window when there's no processes left."
      (when (null (get-buffer-process (current-buffer)))
          (kill-buffer (current-buffer))
          (delete-window)))
    (advice-add 'term-handle-exit :after 'my/autokill-when-no-processes))
#+END_SRC

*** EditorConfig
=.editorconfig=  file  provides a  nice  way  to synchronize  my  editor
configurations between projects and different editors.

#+BEGIN_SRC emacs-lisp
  (use-package editorconfig
    :commands editorconfig-mode
    :config
    (editorconfig-mode 1))
#+END_SRC

*** Flymake Mode
This mode allows checking syntax in  the buffer.  I was using [[https://www.flycheck.org/en/latest/][Flycheck]]
package  before,  but  I  don't   see  major  advantages  of  Flycheck
supporting 50  languages versus  4 in Flymake  [[https://www.flycheck.org/en/latest/user/flycheck-versus-flymake.html#supported-languages][(1)]], because  I'm using
language server protocol that integrates with Flymake, so as long as I
have  server for  a  language, I  have support  for  this language  in
Flymake.

Also let's  use right  fringe for indication  of errors  and warnings,
since it's never used, and left fringe is occupied by diff status.

#+BEGIN_SRC emacs-lisp
  (use-package flymake
    :ensure nil
    :config (setq flymake-fringe-indicator-position 'right-fringe))
#+END_SRC

*** Hydra
Hydra is  something like ability to  create mappings that sit  in it's
own mode, like different user modes  in Kakoune. It allows me to press
some shortcut and  be locked in a mode-like state  where keys that are
related  to  this  prefix  shortcut  are behaving  in  terms  of  this
shortcut.

This  package will  be used  in many  other package  configurations to
provide sane keybindings.

#+BEGIN_SRC emacs-lisp
  (use-package hydra
    :commands (hydra-default-pre
               hydra-keyboard-quit
               hydra--call-interactively-remap-maybe
               hydra-show-hint
               hydra-set-transient-map)
    :bind (("<f5>" . hydra-zoom/body))
    :config
    (defhydra hydra-zoom (:hint nil)
      "Scale text"
      ("+" text-scale-increase "in")
      ("-" text-scale-decrease "out")
      ("0" (text-scale-set 0) "reset")))
#+END_SRC

*** Geiser
Since I mostly use Emacs for studying LISP, and I'm reading SICP which
uses Scheme as main LISP flavor for explanations and exercises, I need
a tool  to run Scheme,  and Geiser seems  like the most  viable option
here, since it also provides completion for it.

#+BEGIN_SRC emacs-lisp
  (use-package geiser
    :hook (scheme-mode . geiser-mode)
    :config
    (setq geiser-active-implementations '(guile racket)
          geiser-default-implementation 'guile))
#+END_SRC

*** Parinfer
Now that's a quality package. It makes writing LISP so easy, that I've
never thought it could be.

#+BEGIN_SRC emacs-lisp
  (use-package parinfer
    :commands (parinfer-mode
               parinfer-toggle-mode)
    :hook ((clojure-mode . parinfer-mode)
           (emacs-lisp-mode . parinfer-mode)
           (common-lisp-mode . parinfer-mode)
           (scheme-mode . parinfer-mode)
           (lisp-mode . parinfer-mode)
           (racket-mode . parinfer-mode))
    :bind (:map parinfer-mode-map
                ("C-," . parinfer-toggle-mode))
    :config (setq parinfer-extensions
                  '(defaults
                     pretty-parens
                     smart-tab
                     smart-yank)))

#+END_SRC

Big thanks to [[https://github.com/shaunlebron][@shaunlebron]] for creating original [[https://github.com/shaunlebron/parinfer][Parinfer]].

*** Flx
This package provides some kind of fuzzy matching for Emacs.

#+BEGIN_SRC emacs-lisp
  (use-package flx)
#+END_SRC

*** Ivy and Counsel
Ivy  is a  narrowing  framework  like Helm,  but  much  lighter in  my
experience.  It  integrates with  Counsel that handles  minibuffer, so
let's install  it too.  I'm  using [[https://github.com/sharkdp/fd][fd]] as  a great replacement  for GNU
Find. It's fast and it takes =.gitignore= into account.  Let's assign it
to =find-program=.   /I guess there will  be no problems/ /if  a well known
tool  is replaced  by something/  /that  is completely  different, am  I
right?/ Well I hope  that it is used by =grep.el= only  which I don't use
anyways.   Counsel  has  nice   =counsel-file-fump=  command  that  uses
=find-program= variable, so it will be more performant with =fd=.

#+BEGIN_SRC emacs-lisp
  (use-package ivy
    :commands ivy-mode
    :bind (("C-x C-b" . ivy-switch-buffer)
           ("C-x b" . ivy-switch-buffer))
    :config
    (use-package counsel
      :commands (counsel-M-x
                 counsel-find-file
                 counsel-fzf
                 counsel-file-jump
                 counsel-recentf
                 counsel-git-grep
                 counsel-rg
                 counsel-describe-function
                 counsel-describe-variable
                 counsel-find-library)
      :config
      (when (executable-find "fd")
        (setq find-program "fd"
              counsel-file-jump-args (split-string "-L --type f --hidden")))
      (when (executable-find "rg")
        (setq counsel-rg-base-command
              "rg -S --no-heading --hidden --line-number --color never %s .")
        (setenv "FZF_DEFAULT_COMMAND"
                "rg --files --hidden --follow --no-ignore --no-messages --glob '!.git/*' --glob '!.svn/*'"))
      :bind (("M-x" . counsel-M-x)
             ("C-x C-f" . counsel-find-file)
             ("C-x f" . counsel-fzf)
             ("C-x p" . counsel-file-jump)
             ("C-x C-r" . counsel-recentf)
             ("C-c g" . counsel-git-grep)
             ("C-c r" . counsel-rg)
             ("C-h f" . counsel-describe-function)
             ("C-h v" . counsel-describe-variable)
             ("C-h l" . counsel-find-library)))
    (setq ivy-re-builders-alist '((t . ivy--regex-fuzzy))
          ivy-count-format ""
          ivy-display-style nil
          ivy-minibuffer-faces nil
          ivy-use-virtual-buffers t
          enable-recursive-minibuffers t)
    :init (ivy-mode 1))
#+END_SRC

*** Company
Complete anything framework. Nothing much to say. Does it's job.

#+BEGIN_SRC emacs-lisp
  (use-package company
    :commands global-company-mode
    :bind (:map company-active-map
                ("TAB" . company-complete-common-or-cycle)
                ("<tab>" . company-complete-common-or-cycle)
                ("<S-Tab>" . company-select-previous)
                ("<backtab>" . company-select-previous))
    :hook (after-init . global-company-mode)
    :config
    (use-package company-flx
      :commands company-flx-mode
      :init (company-flx-mode +1))
    (setq company-require-match 'never
          company-minimum-prefix-length 3
          company-tooltip-align-annotations t
          company-frontends
          '(company-pseudo-tooltip-unless-just-one-frontend
            company-preview-frontend
            company-echo-metadata-frontend))
    (setq company-backends (remove 'company-clang company-backends)
          company-backends (remove 'company-xcode company-backends)
          company-backends (remove 'company-cmake company-backends)
          company-backends (remove 'company-gtags company-backends)))
#+END_SRC

*** Undo Tree
This is more familiar  undo mode. It adds =C-/= mapping  to undo and =C-?=
mapping to redo.

#+BEGIN_SRC emacs-lisp
  (use-package undo-tree
    :commands global-undo-tree-mode
    :init (global-undo-tree-mode 1))
#+END_SRC

*** Yasnippet
Another very handy package, that helps insert templates of code. Now I
really need to write some snippets to use. Also has nice collection as
a separate package

#+BEGIN_SRC emacs-lisp
  (use-package yasnippet
    :commands yas-reload-all
    :hook ((rust-mode . yas-minor-mode)
           (c-mode-common . yas-minor-mode))
    :config
    (use-package yasnippet-snippets)
    (yas-reload-all))
#+END_SRC

*** Magit
Magit is a Emacs  interface to Git.  I've heard that  it has many nice
features, so I want to try it out.

#+BEGIN_SRC emacs-lisp
  (use-package magit)
#+END_SRC

*** Vdiff
=vdiff= is a package, that works similar to Vimdiff.  Ediff isn't really
comfortable to  use, and vdiff also  has integration with Magit,  so I
gonna try it  out. =vdiff-magit= is a supplement  package, that provides
integration with Magit package.

#+BEGIN_SRC emacs-lisp
  (use-package vdiff
    :config
    (use-package vdiff-magit
      :commands (vdiff-magit-dwim vdiff-magit)
      :functions (transient-suffix-put)
      :bind (:map magit-mode-map
                  ("e" . 'vdiff-magit-dwim)
                  ("E" . 'vdiff-magit))
      :config
      (setq vdiff-magit-stage-is-2way t)
      (transient-suffix-put 'magit-dispatch "e" :description "vdiff (dwim)")
      (transient-suffix-put 'magit-dispatch "e" :command 'vdiff-magit-dwim)
      (transient-suffix-put 'magit-dispatch "E" :description "vdiff")
      (transient-suffix-put 'magit-dispatch "E" :command 'vdiff-magit)
      (advice-add 'vdiff-magit-dwim :before 'eyebrowse-create-window-config))
    (setq vdiff-lock-scrolling t
          vdiff-diff-algorithm 'diff
          vdiff-disable-folding nil
          vdiff-min-fold-size 4
          vdiff-subtraction-style 'full
          vdiff-subtraction-fill-char ?\ )
    (define-key vdiff-mode-map (kbd "C-c") vdiff-mode-prefix-map)
    (set-face-attribute 'vdiff-subtraction-face nil :background "#4F343A" :foreground "#F36868")
    (set-face-attribute 'vdiff-addition-face nil :background "#3E493D" :foreground "#98BE65")
    (set-face-attribute 'vdiff-change-face nil :background "#293239" :foreground "#4f97d7")
    (add-hook 'vdiff-mode-hook #'outline-show-all))
#+END_SRC

*** Multiple Cursors
This  package provides  multiple cursors  functionality to  Emacs.  It
isn't much like Kakoune's multiple selections, but anything will do. I
guess I'll figure out best mappings over time.

#+BEGIN_SRC emacs-lisp
  (use-package multiple-cursors
    :commands (mc/cycle-backward
               mc/cycle-forward)
    :bind (("S-<mouse-1>" . mc/add-cursor-on-click)
           ("C-c m" . hydra-mc/body)
           ("C-d" . mc/mark-next-like-this-word))
    :config
    (use-package mc-extras)
    (defhydra hydra-mc (:hint nil :color pink)
      "
  ^Select^                ^Discard^                    ^Move^
  ^──────^────────────────^───────^────────────────────^────^────────────
  _M-s_: split lines      _M-SPC_: discard current     _&_: align
  _s_:   select regexp    _b_:     discard blank lines _(_: cycle backward
  _n_:   select next      _d_:     remove duplicated   _)_: cycle forward
  _p_:   select previous  _q_:     exit                ^ ^
  _C_:   select next line"
      ("M-s" mc/edit-ends-of-lines)
      ("s" mc/mark-all-in-region-regexp)
      ("n" mc/mark-next-like-this-word)
      ("p" mc/mark-previous-like-this-word)
      ("&" mc/vertical-align-with-space)
      ("(" mc/cycle-backward)
      (")" mc/cycle-forward)
      ("M-SPC" mc/remove-current-cursor)
      ("b" mc/remove-cursors-on-blank-lines)
      ("d" mc/remove-duplicated-cursors)
      ("C" mc/mark-next-lines)
      ("q" mc/remove-duplicated-cursors :exit t)))
#+END_SRC

*** Expand Region
This package allows to expand  or reduce region selection semantically
in most languages that I work with inside Emacs.

#+BEGIN_SRC emacs-lisp
  (use-package expand-region
    :commands (er/expand-region
               er/mark-paragraph
               er/mark-inside-pairs
               er/mark-outside-pairs
               er/mark-inside-quotes
               er/mark-outside-quotes
               er/contract-region)
    :bind (("C-c e" . hydra-er/body))
    :config (defhydra hydra-er (:hint nil)
              "
  ^Expand^           ^Mark^
  ^──────^───────────^────^─────────────────
  _e_: expand region _(_: inside pairs
  _-_: reduce region _)_: around pairs
  ^ ^                _q_: inside quotes
  ^ ^                _Q_: around quotes
  ^ ^                _p_: paragraph"
              ("e" er/expand-region :color pink)
              ("-" er/contract-region :color pink)
              ("p" er/mark-paragraph)
              ("(" er/mark-inside-pairs)
              (")" er/mark-outside-pairs)
              ("q" er/mark-inside-quotes)
              ("Q" er/mark-outside-quotes)))
#+END_SRC

*** Phi Search
This search mode is compatible with multiple cursors.

#+BEGIN_SRC emacs-lisp
  (use-package phi-search
    :bind (("C-s" . phi-search)
           ("C-r" . phi-search-backward))
    :config
    (set-face-attribute 'phi-search-selection-face nil :inherit 'isearch)
    (set-face-attribute 'phi-search-match-face nil :inherit 'region))
#+END_SRC

*** Eglot
Emacs polyglot. LSP client.

 #+BEGIN_SRC emacs-lisp
   (when (and (or (executable-find "clangd")
                  (executable-find "rls"))
              window-system)
     (use-package eglot
       :commands (eglot eglot-ensure)
       :config
       (add-to-list 'eglot-server-programs '((c-mode c++-mode) "clangd"))
       (add-to-list 'eglot-ignored-server-capabilites :documentHighlightProvider)
       :hook ((c-mode . eglot-ensure)
              (c++-mode . eglot-ensure)
              (rust-mode . eglot-ensure))))
#+END_SRC

There's still one  problem though. [[Eglot]] use =project.el=  to detect the
root of current  project to run server in. Which  results in the roots
of the  project is found not  exactly where the project  root actually
is, e.g. when multiple projects are stored in single repository.

*** Project
In  order to  migrate  the problem  with  [[Eglot]] I've  used  to have  a
function wrapper over projectile, described in this [[https://github.com/joaotavora/eglot/issues/129#issuecomment-444130367][issue comment]]. But
I do not want to use projectile for that, since Emacs already features
=project.el= and Eglot uses it.  So first we need a list of project root
markers,  that   will  hold   file  names  which   we  will   look  up
recursively. we need  a function that will test  current directory for
several conditions,  like does it have  any of project markers,  is it
root directory, and  if everything fails, it will go  up one directory
and repeat.

#+BEGIN_SRC emacs-lisp
  (use-package project
    :ensure nil
    :config
    (defvar project-root-markers '("Cargo.toml" "compile_commands.json" "compile_flags.txt")
      "Files or directories that indicate the root of a project.")
    (defun my/project-find-root (path)
      "Tail-recursive search in PATH for root markers."
      (let* ((this-dir (file-name-as-directory (file-truename path)))
             (parent-dir (expand-file-name (concat this-dir "../")))
             (system-root-dir (expand-file-name "/")))
        (cond
         ((my/project-root-p this-dir) (cons 'transient this-dir))
         ((equal system-root-dir this-dir) nil)
         (t (my/project-find-root parent-dir)))))
    (defun my/project-root-p (path)
      "Check if current PATH has any of project root markers."
      (let ((results (mapcar (lambda (marker)
                               (file-exists-p (concat path marker)))
                             project-root-markers)))
        (eval `(or ,@ results))))
    (add-to-list 'project-find-functions #'my/project-find-root))
#+END_SRC

*** Clang Format
A package to format C code with Clang Format.

#+BEGIN_SRC emacs-lisp
  (use-package clang-format
    :after cc-mode
    :bind (:map c-mode-base-map
                ("C-c C-f" . clang-format-buffer)
                ("C-c C-S-f" . clang-format-region)))
#+END_SRC

*** GCMH
The Garbage Collector Magic Hack.  Enforce a sneaky Garbage Collection
strategy to minimize GC interference with the activity.

#+BEGIN_SRC emacs-lisp
  (use-package gcmh
    :commands gcmh-mode
    :init (gcmh-mode 1))
#+END_SRC

*** VLF
This package  makes it easier to  view large files in  Emacs. It opens
files in chunks, but still allows to search through file with

#+BEGIN_SRC emacs-lisp
  (use-package vlf-setup
    :ensure vlf
    :config (setq vlf-application 'dont-ask))
#+END_SRC

*** Imenu List
Package  somewhat  similar  to  [[https://github.com/vim-scripts/taglist.vim][Taglist]] plugin  in  Vim  or  Kakoune's
[[https://github.com/andreyorst/tagbar.kak][tagbar.kak]].  Uses  =imenu= to  get information,  and since  many plugins
provide =imenu=  data it's  quite useful. I'm  using =advice-add=  here to
disable  modeline  in  =*imenu-list*=   buffer,  also  locking  it  size
preventing it from  changing when I close or resize  other windows. If
we  call =my/imenu-list-setup=  with  =:after= advice,  the modeline  will
disappear in  another window. With =:after-while=  lambda evaluated only
when =imenu-list= was toggled to be shown.

#+BEGIN_SRC emacs-lisp
  (use-package imenu-list
    :defines imenu-list-idle-update-delay-time
    :bind (("<f9>" . imenu-list-smart-toggle)
           ("<f10>". imenu-list-show))
    :config
    (defun my/imenu-list-setup ()
      "Setings for imenu-list"
      (setq window-size-fixed 'width
            mode-line-format nil))
    (advice-add 'imenu-list-smart-toggle :after-while #'my/imenu-list-setup)
    (setq imenu-list-idle-update-delay-time 0.1
          imenu-list-size 27
          imenu-list-focus-after-activation t))
#+END_SRC

* Postscript
This Emacs Configuration features  various cool E-Lisp hacks somewhere
that I've  found over the  Internet, and I  try to keep  references to
original places, so reader could refer to those, because I alter these
pieces of code for my personal needs and thus it may not be compatible
with  other people  tastes,  and  because I  want  to credit  original
author.

If you  find any issue with  my config feel  free to [[https://github.com/andreyorst/dotfiles/issues/new][file an  issue]] or
contact me via email: [[mailto:andreyorst@gmail.com][andreyorst@gmail.com]].

And as a final step of a proper init file:

#+BEGIN_SRC emacs-lisp
  (provide 'init)
  ;;; init.el ends here
#+END_SRC

Thanks for reading!

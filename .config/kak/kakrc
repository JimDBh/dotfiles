# ╭─────────────╥──────────────────╮
# │ Author:     ║ File:            │
# │ Andrey Orst ║ kakrc            │
# ╞═════════════╩══════════════════╡
# │ Initial script for Kakoune     │
# ╞════════════════════════════════╡
# │ Rest of .dotfiles:             │
# │ GitHub.com/andreyorst/dotfiles │
# ╰────────────────────────────────╯

evaluate-commands %sh{
    config_files="
        plugins/plug.kak/rc/plug.kak
        plugins.kak
        commands.kak
        tmux.kak
        common.kak
        languages.kak
    "

    for file in $config_files; do
        echo "try %{ source '$HOME/.config/kak/$file' } catch %{ echo -debug 'Error sourcing $file' }"
    done
}

define-command -override snippets-create-snippet %{ evaluate-commands %{
    prompt "enter trigger: " %{
        declare-option str new_trigger %val{text}
        prompt "snippet description: " %{
            declare-option str new_description %val{text}
            evaluate-commands %sh{
                snippet_path="$kak_config/snippets/$kak_filetype"
                if [ ! -d "'$snippet_path'" ]; then
                    mkdir -p "'$snippet_path'"
                fi
                if [ -z "${kak_opt_new_trigger##*/*}" ]; then
                    printf "echo -markup %%{{Error}Trigger can't contain '/' character}"
                elif [ -z "${kak_opt_new_description##*/*}" ]; then
                    printf "echo -markup %%{{Error}Description can't contain '/' character}"
                else
                    snippet_path="$snippet_path/$kak_opt_new_trigger - $kak_opt_new_description"
                    printf "edit %s\n" "'$snippet_path'"
                fi
            }
        }
    }
}}


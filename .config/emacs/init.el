;;; init.el --- Emacs main configuration file -*- lexical-binding: t; buffer-read-only: t; no-byte-compile: t -*-
;;;
;;; Commentary:
;;; Emacs config by Andrey Orst.
;;; This file was automatically generated by `org-babel-tangle'.
;;; Do not change this file.  Main config is located in .config/emacs/README.org
;;;
;;; Code:

(unless (featurep 'early-init)
  (load (expand-file-name "early-init.el" user-emacs-directory)))

(defvar package-archives)
(setq package-archives
      '(("gnu" . "https://elpa.gnu.org/packages/")
        ("melpa" . "https://melpa.org/packages/")))

(when (version= emacs-version "26.2")
  (setq gnutls-algorithm-priority "NORMAL:-VERS-TLS1.3"))
(package-initialize)

(unless (package-installed-p 'use-package)
  (package-refresh-contents)
  (package-install 'use-package))

(eval-when-compile
  (require 'use-package)
  (setq use-package-always-ensure t))

(setq user-mail-address "andreyorst@gmail.com"
      user-full-name "Andrey Orst")

(setq ring-bell-function 'ignore)

(setq backup-by-copying t
      create-lockfiles nil
      backup-directory-alist '(("." . "~/.cache/emacs-backups"))
      auto-save-file-name-transforms '((".*" "~/.cache/emacs-backups/" t)))

(fset 'yes-or-no-p 'y-or-n-p)

(add-hook 'after-init-hook (lambda () (setq echo-keystrokes 5)))

(global-unset-key (kbd "S-<down-mouse-1>"))
(global-unset-key (kbd "<mouse-3>"))
(global-set-key [mouse-3] menu-bar-edit-menu)
(global-unset-key (kbd "S-<mouse-3>"))

(setq-default mouse-wheel-progressive-speed nil
              auto-window-vscroll nil
              mouse-highlight nil)

(setq-default indent-tabs-mode nil)

(setq custom-file (expand-file-name "custom.el" user-emacs-directory))
(load custom-file :noerror)

(defvar disabled-commands (expand-file-name ".disabled.el" user-emacs-directory)
  "File to store disabled commands, that were enabled permamently.")
(defadvice en/disable-command (around put-in-custom-file activate)
  "Put declarations in disabled.el."
  (let ((user-init-file disabled-commands))
    ad-do-it))
(load disabled-commands :noerror)

(savehist-mode 1)

(setq default-input-method 'russian-computer)

(prefer-coding-system 'utf-8)
(when (display-graphic-p)
  (setq x-select-request-type '(UTF8_STRING COMPOUND_TEXT TEXT STRING)))

(setq initial-major-mode 'fundamental-mode
      initial-scratch-message "")

(delete-selection-mode t)

(use-package simple
  :ensure nil
  :bind (("C-w" . aorst/kill-region-or-word)
         ("C-o" . aorst/newline-below)
         ("C-S-o" . aorst/newline-above)
         ("M-z" . zap-up-to-char)
         ("M-S-z" . zap-to-char))
  :hook (before-save . delete-trailing-whitespace)
  :init
  (defun aorst/kill-region-or-word (arg)
    (interactive "*p")
    (if (and transient-mark-mode
             mark-active)
        (kill-region (region-beginning) (region-end))
      (backward-kill-word arg)))
  (defun aorst/newline-below ()
    (interactive)
    (end-of-line)
    (newline-and-indent))
  (defun aorst/newline-above ()
    (interactive)
    (back-to-indentation)
    (newline-and-indent)
    (previous-line 1)
    (indent-according-to-mode)))

(defun aorst/real-buffer-p (&optional buffer)
  "Determines whether buffer is real."
  (let ((buffer-name (buffer-name buffer)))
    (or (and (not (minibufferp))
             (buffer-file-name buffer))
        (string-equal "*scratch*" buffer-name)
        (string-match-p ".~.*~" buffer-name)
        (string-match-p "FILE=/" buffer-name)
        (string-match-p "\*edit-indirect .*\*" buffer-name)
        (string-match-p "\*Org Src .*\*" buffer-name))))

(defun aorst/real-buffer-setup (&rest _)
  "Wrapper around `set-window-fringes' function."
  (when window-system
    (let* ((window (selected-window))
           (buffer (window-buffer window)))
      (when (aorst/real-buffer-p buffer)
        (set-window-fringes window 8 8 t)
        (when (bound-and-true-p desktop-save-mode)
          (setq desktop-save-buffer t))))))

(defun aorst/kill-when-no-processes (&rest _)
  "Kill buffer and its window when there's no processes left."
  (when (null (get-buffer-process (current-buffer)))
    (kill-buffer (current-buffer))))

(defun aorst/escape ()
  "Quit in current context.

When there is an active minibuffer and we are not inside it close
it.  When we are inside the minibuffer use the regular
`minibuffer-keyboard-quit' which quits any active region before
exiting.  When there is no minibuffer `keyboard-quit' unless we
are defining or executing a macro."
  (interactive)
  (cond ((active-minibuffer-window)
         (if (minibufferp)
             (minibuffer-keyboard-quit)
           (abort-recursive-edit)))
        (t
         (unless (or defining-kbd-macro
                     executing-kbd-macro)
           (keyboard-quit))))
  (message this-command))
(global-set-key [remap keyboard-quit] #'aorst/escape)

(defun aorst/font-installed-p (font-name)
  "Check if font with FONT-NAME is available."
  (find-font (font-spec :name font-name)))

(defun aorst/indent-buffer ()
  (interactive)
  (save-excursion
    (save-restriction
      (mark-whole-buffer)
      (indent-region (region-beginning) (region-end))
      (deactivate-mark))))
(global-set-key (kbd "C-c C-f") #'aorst/indent-buffer)

(setq inhibit-splash-screen t)

(tooltip-mode -1)
; (menu-bar-mode -1)
(fset 'menu-bar-open nil)

(when window-system
  (scroll-bar-mode -1)
  (tool-bar-mode -1))

(when window-system
  (setq-default cursor-type 'bar
                cursor-in-non-selected-windows nil))

(cond ((aorst/font-installed-p "Hack")
       (set-face-attribute 'default nil :font "Hack 10"))
      ((aorst/font-installed-p "Source Code Pro")
       (set-face-attribute 'default nil :font "Source Code Pro 10")))

(use-package all-the-icons
  :config
  (when (and (not (aorst/font-installed-p "all-the-icons"))
             (window-system))
    (all-the-icons-install-fonts t)))

(use-package doom-themes
  :config
  (setq doom-themes-enable-bold t
        doom-themes-enable-italic t)
  :init
  (load-theme 'doom-one t)
  (set-face-attribute 'highlight nil
                      :foreground 'unspecified
                      :distant-foreground 'unspecified
                      :background 'unspecified))

(when window-system
  (use-package fringe
    :ensure nil
    :hook ((buffer-list-update
            window-configuration-change
            change-major-mode) . aorst/real-buffer-setup)
    :init
    (fringe-mode 0)
    (or standard-display-table
        (setq standard-display-table (make-display-table)))
    (set-display-table-slot standard-display-table 0 ?\ )))

(use-package solaire-mode
  :commands (solaire-global-mode
             solaire-mode-swap-bg
             turn-on-solaire-mode
             solaire-mode-in-minibuffer
             solaire-mode-reset)
  :hook (((after-revert
           change-major-mode
           org-src-mode) . turn-on-solaire-mode)
         (snippet-mode . solaire-mode))
  :config
  (setq solaire-mode-real-buffer-fn #'aorst/real-buffer-p)
  (solaire-mode-swap-bg)
  (with-no-warnings
    (if (boundp 'after-focus-change-function)
        (add-function :after after-focus-change-function #'solaire-mode-reset)
      (add-hook 'focus-in-hook  #'solaire-mode-reset)))
  (defun aorst/create-image-with-background-color (args)
    "Specify background color of Org-mode inline image through modify `ARGS'."
    (let* ((file (car args))
           (type (cadr args))
           (data-p (caddr args))
           (props (cdddr args)))
      ;; get this return result style from `create-image'
      (append (list file type data-p)
              (list :background (face-attribute (or (cadr (assq 'default face-remapping-alist))
                                                    'default)
                                                :background nil t))
              props)))
  (advice-add 'create-image :filter-args #'aorst/create-image-with-background-color)
  :init (solaire-global-mode +1))

(use-package doom-modeline
  :config
  (let ((fg (face-attribute 'default :foreground))
        (bg (face-attribute 'mode-line :background))
        (fg-inactive (face-attribute 'font-lock-comment-face :foreground))
        (bg-inactive (face-attribute 'mode-line-inactive :background)))
    (dolist (face '(doom-modeline-buffer-modified
                    doom-modeline-buffer-minor-mode
                    doom-modeline-project-parent-dir
                    doom-modeline-project-dir
                    doom-modeline-project-root-dir
                    doom-modeline-highlight
                    doom-modeline-debug
                    doom-modeline-info
                    doom-modeline-warning
                    doom-modeline-urgent
                    doom-modeline-unread-number
                    doom-modeline-buffer-path
                    doom-modeline-bar
                    doom-modeline-bar-inactive
                    doom-modeline-panel
                    doom-modeline-buffer-major-mode
                    doom-modeline-buffer-file
                    doom-modeline-lsp-success
                    doom-modeline-lsp-warning
                    doom-modeline-lsp-error
                    doom-modeline-lsp-running
                    doom-modeline-persp-name
                    doom-modeline-battery-full
                    doom-modeline-battery-error
                    doom-modeline-battery-charging
                    doom-modeline-battery-critical
                    doom-modeline-battery-normal))
      (set-face-attribute face nil :foreground fg :weight 'normal))
    (set-face-attribute 'doom-modeline-buffer-file nil :weight 'semi-bold)
    (set-face-attribute 'doom-modeline-buffer-major-mode nil :weight 'semi-bold)
    (set-face-attribute 'doom-modeline-panel nil :background bg)
    (set-face-attribute 'doom-modeline-bar nil :background bg)
    (set-face-attribute 'doom-modeline-bar-inactive nil :background bg)
    (set-face-attribute 'mode-line-inactive nil :foreground fg-inactive :background bg-inactive))
  (setq doom-modeline-bar-width 3
        doom-modeline-major-mode-color-icon nil
        doom-modeline-buffer-color-icon nil
        doom-modeline-buffer-file-name-style 'relative-from-project
        doom-modeline-minor-modes t
        find-file-visit-truename t)
  (doom-modeline-mode 1))

(setq column-number-mode nil
      line-number-mode nil
      size-indication-mode nil
      mode-line-position nil
      mode-line-in-non-selected-windows nil)
(unless (bound-and-true-p doom-modeline-mode)
  (set-face-attribute 'mode-line nil
                      :box (list :line-width 7
                                 :color (face-attribute 'mode-line :background))))

(when window-system
  (use-package frame
    :ensure nil
    :config
    (setq window-divider-default-right-width 1)
    (window-divider-mode 1)
    (set-face-attribute
     'window-divider nil
     :foreground (face-attribute
                  'mode-line-inactive :background))))

(setq-default frame-title-format '("%b — Emacs"))

(when window-system
  (use-package treemacs
    :commands (treemacs-follow-mode)
    :bind (("<f7>" . treemacs)
           ("<f8>" . treemacs-select-window)
           :map treemacs-mode-map
           ([C-tab] . aorst/treemacs-expand-all-projects))
    :hook ((after-init . aorst/treemacs-init-setup)
           (treemacs-mode . aorst/treemacs-setup)
           (treemacs-switch-workspace . aorst/treemacs-expand-all-projects)
           (treemacs-switch-workspace . treemacs-set-fallback-workspace)
           (treemacs-mode . aorst/treemacs-setup-title))
    :config
    (use-package treemacs-magit)
    (set-face-attribute 'treemacs-root-face nil
                        :foreground (face-attribute 'default :foreground)
                        :height 1.0
                        :weight 'normal)
    (treemacs-create-theme "Atom"
      :config
      (progn
        (treemacs-create-icon
         :icon (format " %s\t"
                       (all-the-icons-octicon
                        "repo"
                        :v-adjust -0.1
                        :face '(:inherit font-lock-doc-face :slant normal)))
         :extensions (root))
        (treemacs-create-icon
         :icon (format "%s\t%s\t"
                       (all-the-icons-octicon
                        "chevron-down"
                        :height 0.75
                        :v-adjust 0.1
                        :face '(:inherit font-lock-doc-face :slant normal))
                       (all-the-icons-octicon
                        "file-directory"
                        :v-adjust 0
                        :face '(:inherit font-lock-doc-face :slant normal)))
         :extensions (dir-open))
        (treemacs-create-icon
         :icon (format "%s\t%s\t"
                       (all-the-icons-octicon
                        "chevron-right"
                        :height 0.75
                        :v-adjust 0.1
                        :face '(:inherit font-lock-doc-face :slant normal))
                       (all-the-icons-octicon
                        "file-directory"
                        :v-adjust 0
                        :face '(:inherit font-lock-doc-face :slant normal)))
         :extensions (dir-closed))
        (treemacs-create-icon
         :icon (format "%s\t%s\t"
                       (all-the-icons-octicon
                        "chevron-down"
                        :height 0.75
                        :v-adjust 0.1
                        :face '(:inherit font-lock-doc-face :slant normal))
                       (all-the-icons-octicon
                        "package"
                        :v-adjust 0
                        :face '(:inherit font-lock-doc-face :slant normal)))
         :extensions (tag-open))
        (treemacs-create-icon
         :icon (format "%s\t%s\t"
                       (all-the-icons-octicon
                        "chevron-right"
                        :height 0.75
                        :v-adjust 0.1
                        :face '(:inherit font-lock-doc-face :slant normal))
                       (all-the-icons-octicon
                        "package"
                        :v-adjust 0
                        :face '(:inherit font-lock-doc-face :slant normal)))
         :extensions (tag-closed))
        (treemacs-create-icon
         :icon (format "%s\t"
                       (all-the-icons-octicon
                        "tag"
                        :height 0.9
                        :v-adjust 0
                        :face '(:inherit font-lock-doc-face :slant normal)))
         :extensions (tag-leaf))
        (treemacs-create-icon
         :icon (format "%s\t"
                       (all-the-icons-octicon
                        "flame"
                        :v-adjust 0
                        :face '(:inherit font-lock-doc-face :slant normal)))
         :extensions (error))
        (treemacs-create-icon
         :icon (format "%s\t"
                       (all-the-icons-octicon
                        "stop"
                        :v-adjust 0
                        :face '(:inherit font-lock-doc-face :slant normal)))
         :extensions (warning))
        (treemacs-create-icon
         :icon (format "%s\t"
                       (all-the-icons-octicon
                        "info"
                        :height 0.75
                        :v-adjust 0.1
                        :face '(:inherit font-lock-doc-face :slant normal)))
         :extensions (info))
        (treemacs-create-icon
         :icon (format "  %s\t"
                       (all-the-icons-octicon
                        "file-media"
                        :v-adjust 0
                        :face '(:inherit font-lock-doc-face :slant normal)))
         :extensions ("png" "jpg" "jpeg" "gif" "ico" "tif" "tiff" "svg" "bmp"
                      "psd" "ai" "eps" "indd" "mov" "avi" "mp4" "webm" "mkv"
                      "wav" "mp3" "ogg" "midi"))
        (treemacs-create-icon
         :icon (format "  %s\t"
                       (all-the-icons-octicon
                        "file-code"
                        :v-adjust 0
                        :face '(:inherit font-lock-doc-face :slant normal)))
         :extensions ("yml" "yaml" "sh" "zsh" "fish" "c" "h" "cpp" "cxx" "hpp"
                      "tpp" "cc" "hh" "hs" "lhs" "cabal" "py" "pyc" "rs" "el"
                      "elc" "clj" "cljs" "cljc" "ts" "tsx" "vue" "css" "html"
                      "htm" "dart" "java" "kt" "scala" "sbt" "go" "js" "jsx"
                      "hy" "json" "jl" "ex" "exs" "eex" "ml" "mli" "pp" "dockerfile"
                      "vagrantfile" "j2" "jinja2" "tex" "racket" "rkt" "rktl" "rktd"
                      "scrbl" "scribble" "plt" "makefile" "elm" "xml" "xsl" "rb"
                      "scss" "lua" "lisp" "scm" "sql" "toml" "nim" "pl" "pm" "perl"
                      "vimrc" "tridactylrc" "vimperatorrc" "ideavimrc" "vrapperrc"
                      "cask" "r" "re" "rei" "bashrc" "zshrc" "inputrc" "editorconfig"
                      "gitconfig"))
        (treemacs-create-icon
         :icon (format "  %s\t"
                       (all-the-icons-octicon
                        "book"
                        :v-adjust 0
                        :face '(:inherit font-lock-doc-face :slant normal)))
         :extensions ("lrf" "lrx" "cbr" "cbz" "cb7" "cbt" "cba" "chm" "djvu"
                      "doc" "docx" "pdb" "pdb" "fb2" "xeb" "ceb" "inf" "azw"
                      "azw3" "kf8" "kfx" "lit" "prc" "mobi" "pkg" "opf" "txt"
                      "pdb" "ps" "rtf" "pdg" "xml" "tr2" "tr3" "oxps" "xps"))
        (treemacs-create-icon
         :icon (format "  %s\t" (all-the-icons-octicon
                                 "file-text"
                                 :v-adjust 0
                                 :face '(:inherit font-lock-doc-face :slant normal)))
         :extensions ("md" "markdown" "rst" "log" "org" "txt"
                      "CONTRIBUTE" "LICENSE" "README" "CHANGELOG"))
        (treemacs-create-icon
         :icon (format "  %s\t" (all-the-icons-octicon
                                 "file-binary"
                                 :v-adjust 0
                                 :face '(:inherit font-lock-doc-face :slant normal)))
         :extensions ("exe" "dll" "obj" "so" "o" "out"))
        (treemacs-create-icon
         :icon (format "  %s\t" (all-the-icons-octicon
                                 "file-pdf"
                                 :v-adjust 0
                                 :face '(:inherit font-lock-doc-face :slant normal)))
         :extensions ("pdf"))
        (treemacs-create-icon
         :icon (format "  %s\t" (all-the-icons-octicon
                                 "file-zip"
                                 :v-adjust 0
                                 :face '(:inherit font-lock-doc-face :slant normal)))
         :extensions ("zip" "7z" "tar" "gz" "rar" "tgz"))
        (treemacs-create-icon
         :icon (format "  %s\t" (all-the-icons-octicon
                                 "file-text"
                                 :v-adjust 0
                                 :face '(:inherit font-lock-doc-face :slant normal)))
         :extensions (fallback))))
    (defun aorst/treemacs-expand-all-projects (&optional _)
      "Expand all projects."
      (interactive)
      (save-excursion
        (treemacs--forget-last-highlight)
        (dolist (project (treemacs-workspace->projects (treemacs-current-workspace)))
          (-when-let (pos (treemacs-project->position project))
            (when (eq 'root-node-closed (treemacs-button-get pos :state))
              (goto-char pos)
              (treemacs--expand-root-node pos)))))
      (treemacs--maybe-recenter 'on-distance))
    (defun aorst/treemacs-variable-pitch-labels (&rest _)
      (dolist (face '(treemacs-root-face
                      treemacs-git-unmodified-face
                      treemacs-git-modified-face
                      treemacs-git-renamed-face
                      treemacs-git-ignored-face
                      treemacs-git-untracked-face
                      treemacs-git-added-face
                      treemacs-git-conflict-face
                      treemacs-directory-face
                      treemacs-directory-collapsed-face
                      treemacs-file-face
                      treemacs-tags-face))
        (let ((faces (face-attribute face :inherit nil)))
          (set-face-attribute
           face nil :inherit
           `(variable-pitch ,@(delq 'unspecified (if (listp faces) faces (list faces))))))))
    (defun aorst/treemacs-init-setup ()
      "Set treemacs theme, open treemacs, and expand all projects."
      (treemacs-load-theme "Atom")
      (setq treemacs-collapse-dirs 0)
      (treemacs)
      (aorst/treemacs-expand-all-projects)
      (windmove-right))
    (defun aorst/treemacs-setup ()
      "Set treemacs buffer common settings."
      (setq tab-width 1
            mode-line-format nil
            line-spacing 5)
      (setq-local scroll-step 1)
      (setq-local scroll-conservatively 10000)
      (set-window-fringes nil 0 0 t)
      (aorst/treemacs-variable-pitch-labels))
    (defun aorst/treemacs-setup-fringes ()
      "Set treemacs buffer fringes."
      (set-window-fringes nil 0 0 t)
      (aorst/treemacs-variable-pitch-labels))
    (advice-add #'treemacs-select-window :after #'aorst/treemacs-setup-fringes)
    (defun aorst/treemacs-ignore (file _)
      (or (s-ends-with? ".elc" file)
          (s-ends-with? ".o" file)
          (s-ends-with? ".a" file)
          (string= file ".svn")))
    (add-to-list 'treemacs-ignored-file-predicates #'aorst/treemacs-ignore)
    (defun aorst/treemacs-setup-title ()
      (let ((format '((:eval (concat
                              (make-string
                               (let ((width (window-width)))
                                 (- (/ (if (= (% width 2) 0) width (1+ width)) 2) 5))
                               ?\ )
                              "Treemacs")))))
        (if (version<= emacs-version "27")
            (setq header-line-format format)
          (setq tab-line-format format)))
      (let ((bg (face-attribute 'default :background))
            (fg (face-attribute 'default :foreground))
            (face (if (version<= emacs-version "27")
                      'header-line
                    'tab-line)))
        (face-remap-add-relative face
                                 :box (list :line-width 7 :color bg)
                                 :background bg :foreground fg :height 1.0))))
  (setq treemacs-width 34
        treemacs-is-never-other-window t
        treemacs-space-between-root-nodes nil
        treemacs-indentation 2)
  (treemacs-follow-mode t)
  (treemacs-filewatch-mode t)
  (treemacs-fringe-indicator-mode nil))

(use-package minions
  :commands minions-mode
  :init (minions-mode 1))

(use-package uniquify
  :ensure nil
  :config (setq uniquify-buffer-name-style 'forward))

(use-package display-line-numbers
  :ensure nil
  :config
  (setq display-line-numbers-grow-only t
        display-line-numbers-width-start t))

(use-package org
  :ensure nil
  :defines default-justification
  :hook ((org-mode . flyspell-mode)
         (org-mode . auto-fill-mode)
         (after-save . aorst/org-tangle-on-config-save)
         (org-babel-after-execute . aorst/org-update-inline-images)
         (org-mode . aorst/org-init-setup)
         (ediff-prepare-buffer . outline-show-all)
         ((org-capture-mode org-src-mode) . aorst/discard-history))
  :bind (("C-c a" . org-agenda)
         :map org-mode-map
         ("C-c l" . org-store-link))
  :config
  (use-package ox-latex
    :ensure nil)
  (use-package ox-hugo
    :after ox)
  (when (not (version<= org-version "9.1.9"))
    (use-package org-tempo
      :ensure nil))
  (setq org-startup-with-inline-images nil
        org-startup-folded 'content
        org-hide-emphasis-markers t
        org-adapt-indentation nil
        org-hide-leading-stars t
        org-highlight-latex-and-related '(latex)
        revert-without-query '(".*\.pdf")
        org-preview-latex-default-process 'dvisvgm
        org-src-fontify-natively t
        org-preview-latex-image-directory ".ltximg/"
        org-latex-listings 'minted
        org-latex-pdf-process '("pdflatex -shell-escape -interaction nonstopmode -output-directory %o %f"
                                "pdflatex -shell-escape -interaction nonstopmode -output-directory %o %f"
                                "pdflatex -shell-escape -interaction nonstopmode -output-directory %o %f")
        org-confirm-babel-evaluate nil
        org-imenu-depth 8
        org-log-done t
        org-agenda-files '("~/Tasks"))
  (font-lock-add-keywords 'org-mode
                        '(("^ *\\([-+]\\) "
                           (0 (prog1 () (compose-region (match-beginning 1) (match-end 1) "•"))))))
  (defun aorst/org-tangle-on-config-save ()
    "Tangle source code blocks when configuration file is saved."
    (when (string= buffer-file-name (file-truename (concat user-emacs-directory "README.org")))
      (org-babel-tangle)))
  (defun aorst/org-update-inline-images ()
    "Update inline images in Org-mode."
    (interactive)
    (when org-inline-image-overlays
      (org-redisplay-inline-images)))
  (defun aorst/org-init-setup ()
    "Set buffer local values."
    (setq default-justification 'full))
  (defun aorst/discard-history ()
    "Discard undo history of org src and capture blocks."
    (setq buffer-undo-list nil)
    (set-buffer-modified-p nil))
  (defvar minted-cache-dir
    (file-name-as-directory
     (expand-file-name ".minted/\\jombname"
                       temporary-file-directory)))
  (add-to-list 'org-latex-packages-alist
               `(,(concat "cachedir=" minted-cache-dir)
                 "minted" nil))
  (add-to-list 'org-latex-logfiles-extensions "tex")
  (org-babel-do-load-languages
   'org-babel-load-languages
   '((gnuplot . t)
     (scheme . t)))
  (add-to-list 'org-latex-classes
               '("article"
                 "\\documentclass{article}"
                 ("\\section{%s}" . "\\section*{%s}")
                 ("\\subsection{%s}" . "\\subsection*{%s}")
                 ("\\subsubsection{%s}" . "\\subsubsection*{%s}")
                 ("\\subsubsection{%s}" . "\\subsubsection*{%s}")
                 ("\\subsubsection{%s}" . "\\subsubsection*{%s}")
                 ("\\subsubsection{%s}" . "\\subsubsection*{%s}")
                 ("\\subsubsection{%s}" . "\\subsubsection*{%s}")
                 ("\\subsubsection{%s}" . "\\subsubsection*{%s}")
                 ("\\subsubsection{%s}" . "\\subsubsection*{%s}")
                 ("\\subsubsection{%s}" . "\\subsubsection*{%s}")))
  (defun aorst/org-update-latex-preview-background-color (&rest _)
    (setq-default
     org-format-latex-options
     (plist-put org-format-latex-options
                :background
                (face-attribute (or (cadr (assq 'default face-remapping-alist))
                                    'default)
                                :background nil t))))
  (add-hook 'solaire-mode-hook #'aorst/org-update-latex-preview-background-color))

(use-package doc-view
  :ensure nil
  :config (setq-default doc-view-resolution 192))

(use-package prog-mode
  :ensure nil
  :hook ((prog-mode . show-paren-mode)
         (prog-mode . display-line-numbers-mode)
         (prog-mode . hl-line-mode)))

(use-package cc-mode
  :ensure nil
  :config (defun aorst/cc-mode-setup ()
            (c-set-offset 'case-label '+)
            (setq c-basic-offset 4
                  c-default-style "linux"
                  indent-tabs-mode t
                  comment-start "//"
                  comment-end ""
                  tab-width 4))
  :hook ((c-mode-common . aorst/cc-mode-setup)
         (c-mode-common . electric-pair-local-mode)))

(use-package markdown-mode
  :mode (("README\\.md\\'" . gfm-mode)
         ("\\.md\\'" . markdown-mode)
         ("\\.markdown\\'" . markdown-mode))
  :config
  (use-package edit-indirect
    :hook (edit-indirect-after-creation-hook . aorst/real-buffer-setup))
  (defvar markdown-command "multimarkdown")
  (defun aorst/markdown-setup ()
    "Set buffer local variables."
    (setq fill-column 80
          default-justification 'left))
  :hook ((markdown-mode . flyspell-mode)
         (markdown-mode . auto-fill-mode)
         (markdown-mode . aorst/markdown-setup)))

(use-package rust-mode
  :commands (rust-format-buffer)
  :hook (rust-mode . electric-pair-local-mode)
  :bind (:map rust-mode-map
              ("C-c C-f" . rust-format-buffer)))

(when (executable-find "racer")
  (use-package racer
    :hook (racer-mode . eldoc-mode)
    :init (defun org-babel-edit-prep:rust (&optional _babel-info)
            "Run racer mode for Org Babel."
            (racer-mode 1))))

(when (executable-find "cargo")
  (use-package cargo
    :hook ((rust-mode toml-mode) . cargo-minor-mode)))

(use-package toml-mode
  :bind (:map toml-mode-map
              ("C-c C-f" . aorst/indent-buffer)))

(use-package racket-mode
  :mode ("\\.rkt\\'" . racket-mode)
  :hook (racket-repl-mode . electric-pair-local-mode)
  :bind (:map racket-mode-map
              ("C-c C-d" . racket-run-with-debugging)
              ("C-c C-f" . aorst/indent-buffer)
              (")" . self-insert-command)
              ("]" . self-insert-command)
              ("}" . self-insert-command))
  :config
  (set-face-attribute 'racket-debug-break-face nil :background (face-attribute 'error :foreground) :foreground (face-attribute 'default :background))
  (set-face-attribute 'racket-debug-result-face nil :foreground (face-attribute 'font-lock-comment-face :foreground) :box nil)
  (set-face-attribute 'racket-debug-locals-face nil :foreground (face-attribute 'font-lock-comment-face :foreground) :box nil)
  (set-face-attribute 'racket-selfeval-face nil :foreground (face-attribute 'default :foreground)))

(use-package cmake-mode
  :bind (:map cmake-mode-map
              ("C-c C-f" . aorst/indent-buffer)))

(use-package help
  :ensure nil
  :config (setq help-window-select t))

(use-package elisp-mode
  :ensure nil
  :hook (emacs-lisp-mode . eldoc-mode)
  :bind (:map emacs-lisp-mode-map
              ("C-c C-f" . aorst/indent-buffer)))

(use-package yaml-mode)

(use-package sh-script
  :ensure nil
  :bind (:map sh-mode-map
              ("C-c C-f" . aorst/indent-buffer)))

(use-package perl-mode
  :ensure nil
  :hook ((perl-mode . electric-pair-local-mode)
         (perl-mode . flymake-mode))
  :bind (:map perl-mode-map
              ("C-c C-f" . aorst/indent-buffer)))

(use-package cider)

(setq use-package-hook-name-suffix "-functions")
(when (bound-and-true-p module-file-suffix)
  (use-package vterm
    :bind (("C-`" . aorst/vterm-toggle)
           ("C-t" . aorst/vterm-focus))
    :hook (vterm-exit . aorst/kill-vterm)
    :config
    (defun aorst/vterm-toggle (&optional arg)
      "Toggle `vterm' window on and off with the same command."
      (interactive "P")
      (let* ((bufname "*vterm*")
             (window (get-buffer-window bufname)))
        (if window
            (ignore-errors (delete-window window))
          (let* ((win-side (if (symbolp arg)
                               (cons (split-window-below) 'bot)
                             (cons (split-window-right) 'right)))
                 (window (car win-side))
                 (side (cdr win-side)))
            (select-window window)
            (cond ((get-buffer bufname)
                   (switch-to-buffer bufname))
                  (t (vterm bufname)))
            (when (bound-and-true-p global-tab-line-mode)
              (previous-buffer)
              (bury-buffer))
            (set-window-dedicated-p window t)
            (set-window-parameter window 'no-delete-other-windows t)
            (set-window-parameter window 'window-side side)
            (set-window-parameter window 'no-other-window t)))))
    (defun aorst/vterm-focus (&optional arg)
      "Focus `vterm' or open one if there's none."
      (interactive "P")
      (let ((window (get-buffer-window "*vterm*")))
        (if window
            (select-window window)
          (aorst/vterm-toggle arg))))
    (defun aorst/kill-vterm (buf &optional event)
      "Kill the `*vterm*' buffer after shell exits."
      (when buf (kill-buffer buf)))))
(setq use-package-hook-name-suffix "-hook")

(when (not (bound-and-true-p module-file-suffix))
  (use-package term
    :ensure nil
    :bind (("C-`" . aorst/ansi-term-toggle)
           ("C-t" . aorst/ansi-term-focus))
    :config
    (defun aorst/ansi-term-toggle (&optional arg)
      "Toggle `ansi-term' window on and off with the same command."
      (interactive "P")
      (let* ((bufname "*ansi-term*")
             (window (get-buffer-window bufname))
             (shell (cond ((executable-find "zsh") "zsh")
                          ((executable-find "bash") "bash")
                          (t "sh"))))
        (if window
            (ignore-errors (delete-window window))
          (let* ((win-side (if (symbolp arg)
                               (cons (split-window-below) 'bot)
                             (cons (split-window-right) 'right)))
                 (window (car win-side))
                 (side (cdr win-side)))
            (select-window window)
            (cond ((get-buffer bufname)
                   (switch-to-buffer bufname))
                  (t (ansi-term shell)
                     (rename-buffer bufname)))
            (set-window-dedicated-p window t)
            (set-window-parameter window 'no-delete-other-windows t)
            (set-window-parameter window 'window-side side)
            (set-window-parameter window 'no-other-window t)))))
    (defun aorst/ansi-term-focus (&optional arg)
      "Focus `ansi-term` or open one if there's none."
      (interactive "P")
      (let ((window (get-buffer-window "*ansi-term*")))
        (if window
            (select-window window)
          (aorst/ansi-term-toggle arg))))
    (advice-add 'term-handle-exit :after 'aorst/kill-when-no-processes)))

(use-package editorconfig
  :commands editorconfig-mode
  :config (editorconfig-mode 1))

(use-package flymake
  :ensure nil
  :config
  (setq flymake-fringe-indicator-position 'right-fringe)
  (remove-hook 'flymake-diagnostic-functions 'flymake-proc-legacy-flymake))

(use-package hydra
  :bind (("<f5>" . hydrant/zoom/body))
  :config (defhydra hydrant/zoom (:hint nil)
            "Scale text"
            ("+" text-scale-increase "in")
            ("-" text-scale-decrease "out")
            ("0" (text-scale-set 0) "reset")))

(use-package geiser
  :hook (scheme-mode . geiser-mode)
  :config (setq geiser-active-implementations '(guile)
                geiser-default-implementation 'guile))

(use-package parinfer
  :commands (parinfer-mode
             parinfer-toggle-mode)
  :hook ((clojure-mode
          emacs-lisp-mode
          common-lisp-mode
          scheme-mode
          lisp-mode
          racket-mode) . parinfer-mode)
  :bind (:map parinfer-mode-map
              ("C-," . parinfer-toggle-mode))
  :config (setq parinfer-extensions
                '(defaults
                   pretty-parens
                   smart-tab
                   smart-yank)))

(use-package ivy
  :commands ivy-mode
  :bind (("C-x C-b" . ivy-switch-buffer)
         ("C-x b" . ivy-switch-buffer))
  :hook ((minibuffer-setup-hook . aorst/minibuffer-defer-garbage-collection)
         (minibuffer-exit-hook . aorst/minibuffer-restore-garbage-collection))
  :config
  (use-package counsel
    :commands (counsel-M-x
               counsel-find-file
               counsel-file-jump
               counsel-recentf
               counsel-rg
               counsel-describe-function
               counsel-describe-variable
               counsel-find-library)
    :config
    (when (executable-find "fd")
      (define-advice counsel-file-jump (:around (foo &optional initial-input initial-directory))
        (let ((find-program "fd")
              (counsel-file-jump-args (split-string "-L --type f --hidden")))
          (funcall foo))))
    (when (executable-find "rg")
      (setq counsel-rg-base-command
            "rg -S --no-heading --hidden --line-number --color never %s .")
      (setenv "FZF_DEFAULT_COMMAND"
              "rg --files --hidden --follow --no-ignore --no-messages --glob '!.git/*' --glob '!.svn/*'"))
    :bind (("M-x" . counsel-M-x)
           ("C-x C-f" . counsel-find-file)
           ("C-x f" . counsel-file-jump)
           ("C-x C-r" . counsel-recentf)
           ("C-x d" . counsel-dired)
           ("C-h f" . counsel-describe-function)
           ("C-h C-f" . counsel-describe-face)
           ("C-h v" . counsel-describe-variable)
           ("C-h l" . counsel-find-library)))
  (setq ivy-re-builders-alist '((t . ivy--regex-fuzzy))
        ivy-count-format ""
        ivy-ignore-buffers '("\\` " "\\`\\*")
        ivy-display-style nil
        ivy-minibuffer-faces nil
        ivy-minibuffer-faces '(default default default default)
        ivy-use-virtual-buffers t
        enable-recursive-minibuffers t)
  :init
  (defun aorst/minibuffer-defer-garbage-collection ()
    "Defer garbage collection for minibuffer"
    (setq gc-cons-threshold most-positive-fixnum))
  (defun aorst/minibuffer-restore-garbage-collection ()
    "Resotre garbage collection settings."
    (run-at-time
     1 nil (lambda () (setq gc-cons-threshold aorst--gc-cons-threshold))))
  (ivy-mode 1))

(use-package ivy-posframe
  :after ivy
  :config
  (defun aorst/posframe-position (str)
    (ivy-posframe--display str #'aorst/posframe-unser-tabs-center))
  (defun aorst/posframe-unser-tabs-center (info)
    "vaiv."
    (cons (/ (- (plist-get info :parent-frame-width)
                (plist-get info :posframe-width))
             2)
          (+ (if global-tab-line-mode (window-tab-line-height) 0))))
  (setq ivy-posframe-display-functions-alist '((t . aorst/posframe-position))
        ivy-posframe-height-alist '((t . 15))
        ivy-posframe-parameters '((internal-border-width . 3))
        ivy-posframe-width 100)
  (set-face-attribute 'ivy-posframe nil :background (face-attribute 'mode-line :background))
  (ivy-posframe-mode +1))

(use-package company
  :commands global-company-mode
  :bind (:map company-active-map
              ("TAB" . company-complete-common-or-cycle)
              ("<tab>" . company-complete-common-or-cycle)
              ("<S-Tab>" . company-select-previous)
              ("<backtab>" . company-select-previous)
              ("C-n" . company-select-next)
              ("C-p" . company-select-previous))
  :hook (after-init . global-company-mode)
  :config
  (setq company-require-match 'never
        company-minimum-prefix-length 3
        company-tooltip-align-annotations t
        company-frontends '(company-pseudo-tooltip-unless-just-one-frontend
                            company-preview-frontend
                            company-echo-metadata-frontend)
        company-backends '(company-capf company-files)))

(use-package company-flx
  :after company
  :config
  (company-flx-mode +1))

(use-package company-posframe
  :after company
  :config
  (setq company-posframe-quickhelp-show-header nil
        company-posframe-show-indicator nil
        company-posframe-show-metadata nil)
  (setq-default company-posframe-quickhelp-show-params
                (list :poshandler #'company-posframe-quickhelp-right-poshandler
                      :internal-border-width 1
                      :timeout 60
                      :internal-border-color (face-attribute 'mode-line-inactive :background)
                      :no-properties nil
                      :poshandler nil))
  (company-posframe-mode))

(use-package undo-tree
  :commands global-undo-tree-mode
  :init (global-undo-tree-mode 1))

(use-package yasnippet
  :commands yas-reload-all
  :hook ((rust-mode
          c-mode-common
          racket-mode). yas-minor-mode)
  :config
  (add-to-list 'yas-key-syntaxes 'yas-shortest-key-until-whitespace)
  (yas-reload-all))

(use-package magit
  :hook ((git-commit-mode . flyspell-mode))
  :bind (("<f12>" . magit-status))
  :config (setq magit-ediff-dwim-show-on-hunks t))

(use-package ediff
  :ensure nil
  :hook ((ediff-before-setup . aorst/store-pre-ediff-winconfig)
         (ediff-quit . aorst/restore-pre-ediff-winconfig)
         (ediff-keymap-setup . aorst/ediff-setup-keys))
  :config
  (advice-add 'ediff-window-display-p :override #'ignore)
  (setq ediff-split-window-function 'split-window-horizontally)
  :init
  (defvar aorst--ediff-last-windows nil
    "Stores window configuration before `ediff' was invoked.")
  (defun aorst/store-pre-ediff-winconfig ()
    (setq aorst--ediff-last-windows (current-window-configuration)))
  (defun aorst/restore-pre-ediff-winconfig ()
    (set-window-configuration aorst--ediff-last-windows))
  (defun aorst/ediff-copy-both-to-C ()
    (interactive)
    (ediff-copy-diff ediff-current-difference nil 'C nil
                     (concat
                      (ediff-get-region-contents ediff-current-difference 'A ediff-control-buffer)
                      (ediff-get-region-contents ediff-current-difference 'B ediff-control-buffer))))
  (defun aorst/ediff-setup-keys ()
    (define-key ediff-mode-map "d" #'aorst/ediff-copy-both-to-C)))

(use-package multiple-cursors
  :commands (mc/cycle-backward
             mc/cycle-forward)
  :bind (("S-<mouse-1>" . mc/add-cursor-on-click)
         ("C-c m" . hydrant/mc/body)
         :map mc/keymap
         ("<return>" . nil))
  :requires hydra
  :config
  (defhydra hydrant/mc (:hint nil :color pink)
    "
^Select^                 ^Discard^                     ^Edit^               ^Navigate^
^──────^─────────────────^───────^─────────────────────^────^───────────────^────────^──────────
_M-s_: split lines       _M-SPC_: discard current      _&_: align           _(_: cycle backward
_s_:   select regexp     _b_:     discard blank lines  _#_: insert numbers  _)_: cycle forward
_n_:   select next       _d_:     remove duplicated    ^ ^                  ^ ^
_p_:   select previous   _q_:     exit                 ^ ^                  ^ ^
_C_:   select next line"
    ("M-s" mc/edit-ends-of-lines)
    ("s" mc/mark-all-in-region-regexp)
    ("n" mc/mark-next-like-this-word)
    ("p" mc/mark-previous-like-this-word)
    ("&" mc/vertical-align-with-space)
    ("(" mc/cycle-backward)
    (")" mc/cycle-forward)
    ("M-SPC" mc/remove-current-cursor)
    ("b" mc/remove-cursors-on-blank-lines)
    ("d" mc/remove-duplicated-cursors)
    ("C" mc/mark-next-lines)
    ("#" mc/insert-numbers)
    ("q" mc/remove-duplicated-cursors :exit t)))
(use-package mc-extras)

(when (or (executable-find "clangd")
          (executable-find "rls"))
  (use-package lsp-mode
    :hook ((rust-mode c-mode c++-mode) . lsp)
    :init (setq lsp-keymap-prefix "C-c l")
    :config
    (setq lsp-rust-clippy-preference "on"
          lsp-prefer-capf t
          lsp-enable-symbol-highlighting nil)
    (use-package lsp-ui
      :commands lsp-ui-mode
      :hook (lsp-ui-mode . aorst/disable-eldoc-box)
      :bind (:map lsp-ui-mode-map
                  ("M-." . lsp-ui-peek-find-definitions)
                  ("M-/" . lsp-ui-peek-find-references))
      :config
      (defun aorst/disable-eldoc-box ()
        (eldoc-box-hover-mode 0)
        (eldoc-box-hover-at-point-mode 0))
      (setq lsp-ui-doc-border (face-attribute 'mode-line-inactive :background)
            lsp-ui-sideline-enable nil
            lsp-ui-imenu-enable nil)
      (when (fboundp 'aorst/escape)
        (define-advice lsp-ui-doc--make-request (:around (foo))
          (unless (eq this-command 'aorst/escape)
            (funcall foo))))
      (lsp-ui-mode))))

(use-package project
  :ensure nil
  :bind (("C-c p f" . project-find-file)
         ("C-c p r" . project-find-regexp))
  :config
  (defvar project-root-markers '("Cargo.toml" "compile_commands.json" "compile_flags.txt")
    "Files or directories that indicate the root of a project.")
  (defun aorst/project-find-root (path)
    "Recursive search in PATH for root markers."
    (let* ((this-dir (file-name-as-directory (file-truename path)))
           (parent-dir (expand-file-name (concat this-dir "../")))
           (system-root-dir (expand-file-name "/")))
      (cond
       ((aorst/project-root-p this-dir) (cons 'transient this-dir))
       ((equal system-root-dir this-dir) nil)
       (t (aorst/project-find-root parent-dir)))))
  (defun aorst/project-root-p (path)
    "Check if current PATH has any of project root markers."
    (let ((results (mapcar (lambda (marker)
                             (file-exists-p (concat path marker)))
                           project-root-markers)))
      (eval `(or ,@ results))))
  (add-to-list 'project-find-functions #'aorst/project-find-root))

(use-package clang-format
  :after cc-mode
  :bind (:map c-mode-base-map
              ("C-c C-f" . clang-format-buffer)
              ("C-c C-S-f" . clang-format-region)))

(use-package server
  :ensure nil
  :config
  (unless (server-running-p)
    (server-start)))

(use-package eldoc-box
  :hook (eldoc-mode . aorst/eldoc-box-enable)
  :config
  (setq x-wait-for-event-timeout 0)
  (setq eldoc-box-max-pixel-width 1920
        eldoc-box-max-pixel-height 1080)
  (set-face-attribute 'eldoc-box-border nil :background (face-attribute 'mode-line-inactive :background))
  :init
  (defun aorst/eldoc-box-enable ()
    "Helper function that enables `eldoc-box-hover-at-point-mode' for real buffers only."
    (interactive)
    (when (and (aorst/real-buffer-p)
               (not (bound-and-true-p lsp-ui-mode)))
      (eldoc-box-hover-at-point-mode))))

(use-package hideshow
  :ensure nil
  :requires transient
  :hook (prog-mode . hs-minor-mode)
  :bind (:map prog-mode-map
              ("<f6>" . aorst/hideshow-menu))
  :config
  (define-transient-command aorst/hideshow-menu ()
    "Hideshow commands."
    [:description
     "Hide"
     ("ha" "all" hs-hide-all)
     ("hb" "block" hs-hide-block)]
    [:description
     "Show"
     ("sa" "all" hs-show-all)
     ("sb" "block" hs-show-block)]
    (interactive)
    (when (bound-and-true-p hs-minor-mode)
      (transient-setup 'aorst/hideshow-menu nil nil))))

(when window-system
  (use-package desktop
    :ensure nil
    :hook ((after-init . aorst/desktop-restore)
           (desktop-after-read . aorst/desktop-remove))
    :init
    (setq desktop-path '("~/.dotfiles/.config/emacs/")
          desktop-dirname "~/.dotfiles/.config/emacs/"
          desktop-base-file-name "emacs-desktop"
          desktop-save t
          desktop-load-locked-desktop t)
    (defun aorst/desktop-remove ()
      "Remove current desktop, but save `desktop-dirname'."
      (let ((desktop desktop-dirname))
        (desktop-remove)
        (setq desktop-dirname desktop)))
    (defun aorst/saved-desktop-p ()
      "Check if desktop exists."
      (file-exists-p (concat desktop-dirname "/" desktop-base-file-name)))
    (defun aorst/desktop-restore ()
      "Restore a saved emacs session."
      (interactive)
      (if (aorst/saved-desktop-p)
          (desktop-read)
        (message "No desktop found.")))
    (defun aorst/desktop-save ()
      "Save an emacs session."
      (interactive)
      (when (aorst/saved-desktop-p)
        (desktop-save-in-desktop-dir))
      (message "Session not saved.")
      (desktop-save-in-desktop-dir))
    (defun aorst/desktop-auto-save ()
      "Automatically save desktop."
      (when (eq (desktop-owner) (emacs-pid))
        (aorst/desktop-save)))
    (desktop-save-mode t)))

(provide 'init)
;;; init.el ends here

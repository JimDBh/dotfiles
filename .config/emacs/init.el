;;; init.el --- Emacs main configuration file -*- lexical-binding: t; buffer-read-only: t; no-byte-compile: t -*-
;;;
;;; Commentary:
;;; Emacs config by Andrey Orst.
;;; This file was automatically generated by `org-babel-tangle'.
;;; Do not change this file.  Main config is located in .config/emacs/config.org
;;;
;;; Code:

(defvar package-archives)
(setq package-archives
      '(("gnu" . "https://elpa.gnu.org/packages/")
        ("melpa" . "https://melpa.org/packages/")))

(when (version= emacs-version "26.2")
  (setq gnutls-algorithm-priority "NORMAL:-VERS-TLS1.3"))
(package-initialize)

(unless (package-installed-p 'use-package)
  (package-refresh-contents)
  (package-install 'use-package))

(eval-when-compile
  (require 'use-package)
  (setq use-package-always-ensure t))

(setq user-mail-address "andreyorst@gmail.com"
      user-full-name "Andrey Orst")

(setq ring-bell-function 'ignore)

(setq backup-by-copying t
      create-lockfiles nil
      backup-directory-alist '(("." . "~/.cache/emacs-backups"))
      auto-save-file-name-transforms '((".*" "~/.cache/emacs-backups/" t)))

(fset 'yes-or-no-p 'y-or-n-p)

(add-hook 'after-init-hook (lambda () (setq echo-keystrokes 5)))

(global-unset-key (kbd "S-<down-mouse-1>"))
(global-unset-key (kbd "<mouse-3>"))
(global-set-key [mouse-3] menu-bar-edit-menu)
(global-unset-key (kbd "S-<mouse-3>"))

(setq-default mouse-wheel-progressive-speed nil
              auto-window-vscroll nil)

(setq-default indent-tabs-mode nil)

(setq custom-file (expand-file-name "custom.el" user-emacs-directory))
(load custom-file :noerror)

(defvar disabled-commands (expand-file-name ".disabled.el" user-emacs-directory)
  "File to store disabled commands, that were enabled permamently.")
(defadvice en/disable-command (around put-in-custom-file activate)
  "Put declarations in disabled.el."
  (let ((user-init-file disabled-commands))
    ad-do-it))
(load disabled-commands :noerror)

(savehist-mode 1)

(setq default-input-method 'russian-computer)

(prefer-coding-system 'utf-8)
(when (display-graphic-p)
  (setq x-select-request-type '(UTF8_STRING COMPOUND_TEXT TEXT STRING)))

(setq initial-major-mode 'fundamental-mode
      initial-scratch-message "")

(delete-selection-mode t)

(use-package simple
  :ensure nil
  :bind (("C-w" . aorst/kill-region-or-word)
         ("C-o" . aorst/newline-below)
         ("C-S-o" . aorst/newline-above)
         ("M-z" . zap-up-to-char)
         ("M-S-z" . zap-to-char))
  :hook (before-save . delete-trailing-whitespace)
  :init
  (defun aorst/kill-region-or-word (arg)
    (interactive "*p")
    (if (and transient-mark-mode
             mark-active)
        (kill-region (region-beginning) (region-end))
      (backward-kill-word arg)))
  (defun aorst/newline-below ()
    (interactive)
    (end-of-line)
    (newline-and-indent))
  (defun aorst/newline-above ()
    (interactive)
    (back-to-indentation)
    (newline-and-indent)
    (previous-line 1)
    (indent-according-to-mode)))

(defun aorst/real-buffer-p (&optional buffer)
  "Determines whether buffer is real."
  (let ((buffer-name (buffer-name buffer)))
    (or (and (not (minibufferp))
             (buffer-file-name buffer))
        (string-equal "*scratch*" buffer-name)
        (string-match-p ".~.*~" buffer-name)
        (string-match-p "FILE=/" buffer-name)
        (string-match-p "\*edit-indirect .*\*" buffer-name)
        (string-match-p "\*Org Src .*\*" buffer-name))))

(defun aorst/real-buffer-setup (&rest _)
  "Wrapper around `set-window-fringes' function."
  (when window-system
    (let* ((window (selected-window))
           (buffer (window-buffer window)))
      (when (aorst/real-buffer-p buffer)
        (set-window-fringes window 8 8 t)
        (when (bound-and-true-p desktop-save-mode)
          (setq desktop-save-buffer t))))))

(defun aorst/kill-when-no-processes (&rest _)
  "Kill buffer and its window when there's no processes left."
  (when (null (get-buffer-process (current-buffer)))
    (kill-buffer (current-buffer))))

;; suppress byte-compiler warnings
(declare-function minibuffer-keyboard-quit "delsel" (&optional ARGS))

(defun aorst/escape ()
  "Quit in current context.

When there is an active minibuffer and we are not inside it close
it.  When we are inside the minibuffer use the regular
`minibuffer-keyboard-quit' which quits any active region before
exiting.  When there is no minibuffer `keyboard-quit' unless we
are defining or executing a macro."
  (interactive)
  (cond ((active-minibuffer-window)
         (if (minibufferp)
             (minibuffer-keyboard-quit)
           (abort-recursive-edit)))
        ((bound-and-true-p iedit-mode)
         (iedit-quit))
        (t
         ;; ignore top level quits for macros
         (unless (or defining-kbd-macro executing-kbd-macro)
           (keyboard-quit)))))
(global-set-key [remap keyboard-quit] #'aorst/escape)

(defun aorst/command-error-function (data context caller)
  "Ignore the `text-read-only', `end-of-buffer', and `beginning-of-buffer' signals.
Pass the rest DATA CONTEXT CALLER to the default handler."
  (when (not (memq (car data) '(text-read-only
                                end-of-buffer
                                beginning-of-buffer)))
    (command-error-default-function data context caller)))

(setq command-error-function #'aorst/command-error-function)

(defun aorst/font-installed-p (font-name)
  "Check if font with FONT-NAME is available."
  (if (find-font (font-spec :name font-name))
      t
    nil))

(setq inhibit-splash-screen t)

(tooltip-mode -1)
(menu-bar-mode -1)
(fset 'menu-bar-open nil)

(when window-system
  (scroll-bar-mode -1)
  (tool-bar-mode -1))

(when window-system
  (setq-default cursor-type 'bar
                cursor-in-non-selected-windows nil))

(cond ((aorst/font-installed-p "Hack")
       (set-face-attribute 'default nil :font "Hack 10"))
      ((aorst/font-installed-p "Source Code Pro")
       (set-face-attribute 'default nil :font "Source Code Pro 10")))

(use-package all-the-icons
  :config
  (when (and (not (aorst/font-installed-p "all-the-icons"))
             (window-system))
    (all-the-icons-install-fonts t)))

(use-package doom-themes
  :commands (doom-themes-org-config)
  :config
  (doom-themes-org-config)
  (setq doom-themes-enable-bold t
        doom-themes-enable-italic t)
  :init (load-theme 'doom-one t))

(when window-system
  (use-package fringe
    :ensure nil
    :hook ((buffer-list-update
            window-configuration-change
            change-major-mode) . aorst/real-buffer-setup)
    :init
    (fringe-mode 0)
    (or standard-display-table
        (setq standard-display-table (make-display-table)))
    (set-display-table-slot standard-display-table 0 ?\ )))

(use-package solaire-mode
  :commands (solaire-global-mode
             solaire-mode-swap-bg
             turn-on-solaire-mode
             solaire-mode-in-minibuffer
             solaire-mode-reset)
  :hook (((after-revert
           change-major-mode
           org-src-mode) . turn-on-solaire-mode)
         (snippet-mode . solaire-mode))
  :config
  (setq solaire-mode-real-buffer-fn #'aorst/real-buffer-p)
  (solaire-mode-swap-bg)
  (with-no-warnings
    (if (boundp 'after-focus-change-function)
        (add-function :after after-focus-change-function #'solaire-mode-reset)
      (add-hook 'focus-in-hook  #'solaire-mode-reset)))
  :init (solaire-global-mode +1))

(use-package doom-modeline
  :config
  (let ((fg (face-attribute 'default :foreground))
        (bg (face-attribute 'mode-line :background))
        (fg-inactive (face-attribute 'font-lock-comment-face :foreground))
        (bg-inactive (face-attribute 'mode-line-inactive :background)))
    (dolist (face '(doom-modeline-buffer-modified
                    doom-modeline-buffer-minor-mode
                    doom-modeline-project-parent-dir
                    doom-modeline-project-dir
                    doom-modeline-project-root-dir
                    doom-modeline-highlight
                    doom-modeline-debug
                    doom-modeline-info
                    doom-modeline-warning
                    doom-modeline-urgent
                    doom-modeline-unread-number
                    doom-modeline-buffer-path
                    doom-modeline-bar
                    doom-modeline-bar-inactive
                    doom-modeline-panel
                    doom-modeline-buffer-major-mode
                    doom-modeline-buffer-file
                    doom-modeline-lsp-success
                    doom-modeline-lsp-warning
                    doom-modeline-lsp-error))
      (set-face-attribute face nil :foreground fg :weight 'normal))
    (set-face-attribute 'doom-modeline-buffer-file nil :weight 'semi-bold)
    (set-face-attribute 'doom-modeline-buffer-major-mode nil :weight 'semi-bold)
    (set-face-attribute 'doom-modeline-panel nil :background bg)
    (set-face-attribute 'doom-modeline-bar nil :background bg)
    (set-face-attribute 'doom-modeline-bar-inactive nil :background bg)
    (set-face-attribute 'mode-line-inactive nil :foreground fg-inactive :background bg-inactive))
  (setq doom-modeline-bar-width 3
        doom-modeline-major-mode-color-icon nil
        doom-modeline-buffer-color-icon nil
        doom-modeline-buffer-file-name-style 'relative-from-project
        doom-modeline-minor-modes t
        find-file-visit-truename t)
  (doom-modeline-mode 1))

(setq column-number-mode nil
      line-number-mode nil
      size-indication-mode nil
      mode-line-position nil
      mode-line-in-non-selected-windows nil)
(unless (bound-and-true-p doom-modeline-mode)
  (set-face-attribute 'mode-line nil
                      :box (list :line-width 7
                                 :color (face-attribute 'mode-line :background))))

(when window-system
  (use-package frame
    :ensure nil
    :config
    (add-to-list 'after-make-frame-functions #'aorst/set-frame-dark)
    (setq window-divider-default-right-width 1)
    (window-divider-mode 1)
    (set-face-attribute 'window-divider nil :foreground (face-attribute 'mode-line-inactive :background))
    (defun aorst/set-frame-dark (&optional frame)
      "Set FRAME titlebar colorscheme to dark variant."
      (with-selected-frame (or frame (selected-frame))
        (call-process-shell-command
         (format "xprop -f _GTK_THEME_VARIANT 8u -set _GTK_THEME_VARIANT \"dark\" -name \"%s\""
                 (frame-parameter frame 'name)))))
    (aorst/set-frame-dark)))

(setq-default frame-title-format '("%b — Emacs"))

(when window-system
  (use-package treemacs
    :commands (treemacs-follow-mode)
    :bind (("<f7>" . treemacs)
           ("<f8>" . treemacs-select-window)
           :map treemacs-mode-map
           ([C-tab] . aorst/treemacs-expand-all-projects))
    :hook ((after-init . aorst/treemacs-init-setup)
           (treemacs-mode . aorst/treemacs-setup)
           (treemacs-switch-workspace . aorst/treemacs-expand-all-projects)
           (treemacs-switch-workspace . treemacs-set-fallback-workspace)
           (treemacs-mode . aorst/treemacs-setup-title))
    :config
    (use-package treemacs-magit)
    (set-face-attribute 'treemacs-root-face nil
                        :foreground (face-attribute 'default :foreground)
                        :height 1.0
                        :weight 'normal)
    (treemacs-create-theme "Atom"
      :config
      (progn
        (treemacs-create-icon
         :icon (format " %s\t"
                       (all-the-icons-octicon
                        "repo"
                        :v-adjust -0.1
                        :face '(:inherit font-lock-doc-face :slant normal)))
         :extensions (root))
        (treemacs-create-icon
         :icon (format "%s\t%s\t"
                       (all-the-icons-octicon
                        "chevron-down"
                        :height 0.75
                        :v-adjust 0.1
                        :face '(:inherit font-lock-doc-face :slant normal))
                       (all-the-icons-octicon
                        "file-directory"
                        :v-adjust 0
                        :face '(:inherit font-lock-doc-face :slant normal)))
         :extensions (dir-open))
        (treemacs-create-icon
         :icon (format "%s\t%s\t"
                       (all-the-icons-octicon
                        "chevron-right"
                        :height 0.75
                        :v-adjust 0.1
                        :face '(:inherit font-lock-doc-face :slant normal))
                       (all-the-icons-octicon
                        "file-directory"
                        :v-adjust 0
                        :face '(:inherit font-lock-doc-face :slant normal)))
         :extensions (dir-closed))
        (treemacs-create-icon
         :icon (format "%s\t%s\t"
                       (all-the-icons-octicon
                        "chevron-down"
                        :height 0.75
                        :v-adjust 0.1
                        :face '(:inherit font-lock-doc-face :slant normal))
                       (all-the-icons-octicon
                        "package"
                        :v-adjust 0
                        :face '(:inherit font-lock-doc-face :slant normal)))
         :extensions (tag-open))
        (treemacs-create-icon
         :icon (format "%s\t%s\t"
                       (all-the-icons-octicon
                        "chevron-right"
                        :height 0.75
                        :v-adjust 0.1
                        :face '(:inherit font-lock-doc-face :slant normal))
                       (all-the-icons-octicon
                        "package"
                        :v-adjust 0
                        :face '(:inherit font-lock-doc-face :slant normal)))
         :extensions (tag-closed))
        (treemacs-create-icon
         :icon (format "%s\t"
                       (all-the-icons-octicon
                        "tag"
                        :height 0.9
                        :v-adjust 0
                        :face '(:inherit font-lock-doc-face :slant normal)))
         :extensions (tag-leaf))
        (treemacs-create-icon
         :icon (format "%s\t"
                       (all-the-icons-octicon
                        "flame"
                        :v-adjust 0
                        :face '(:inherit font-lock-doc-face :slant normal)))
         :extensions (error))
        (treemacs-create-icon
         :icon (format "%s\t"
                       (all-the-icons-octicon
                        "stop"
                        :v-adjust 0
                        :face '(:inherit font-lock-doc-face :slant normal)))
         :extensions (warning))
        (treemacs-create-icon
         :icon (format "%s\t"
                       (all-the-icons-octicon
                        "info"
                        :height 0.75
                        :v-adjust 0.1
                        :face '(:inherit font-lock-doc-face :slant normal)))
         :extensions (info))
        (treemacs-create-icon
         :icon (format "  %s\t"
                       (all-the-icons-octicon
                        "file-media"
                        :v-adjust 0
                        :face '(:inherit font-lock-doc-face :slant normal)))
         :extensions ("png" "jpg" "jpeg" "gif" "ico" "tif" "tiff" "svg" "bmp"
                      "psd" "ai" "eps" "indd" "mov" "avi" "mp4" "webm" "mkv"
                      "wav" "mp3" "ogg" "midi"))
        (treemacs-create-icon
         :icon (format "  %s\t"
                       (all-the-icons-octicon
                        "file-code"
                        :v-adjust 0
                        :face '(:inherit font-lock-doc-face :slant normal)))
         :extensions ("yml" "yaml" "sh" "zsh" "fish" "c" "h" "cpp" "cxx" "hpp"
                      "tpp" "cc" "hh" "hs" "lhs" "cabal" "py" "pyc" "rs" "el"
                      "elc" "clj" "cljs" "cljc" "ts" "tsx" "vue" "css" "html"
                      "htm" "dart" "java" "kt" "scala" "sbt" "go" "js" "jsx"
                      "hy" "json" "jl" "ex" "exs" "eex" "ml" "mli" "pp" "dockerfile"
                      "vagrantfile" "j2" "jinja2" "tex" "racket" "rkt" "rktl" "rktd"
                      "scrbl" "scribble" "plt" "makefile" "elm" "xml" "xsl" "rb"
                      "scss" "lua" "lisp" "scm" "sql" "toml" "nim" "pl" "pm" "perl"
                      "vimrc" "tridactylrc" "vimperatorrc" "ideavimrc" "vrapperrc"
                      "cask" "r" "re" "rei" "bashrc" "zshrc" "inputrc" "editorconfig"
                      "gitconfig"))
        (treemacs-create-icon
         :icon (format "  %s\t"
                       (all-the-icons-octicon
                        "book"
                        :v-adjust 0
                        :face '(:inherit font-lock-doc-face :slant normal)))
         :extensions ("lrf" "lrx" "cbr" "cbz" "cb7" "cbt" "cba" "chm" "djvu"
                      "doc" "docx" "pdb" "pdb" "fb2" "xeb" "ceb" "inf" "azw"
                      "azw3" "kf8" "kfx" "lit" "prc" "mobi" "pkg" "opf" "txt"
                      "pdb" "ps" "rtf" "pdg" "xml" "tr2" "tr3" "oxps" "xps"))
        (treemacs-create-icon
         :icon (format "  %s\t" (all-the-icons-octicon
                                 "file-text"
                                 :v-adjust 0
                                 :face '(:inherit font-lock-doc-face :slant normal)))
         :extensions ("md" "markdown" "rst" "log" "org" "txt"
                      "CONTRIBUTE" "LICENSE" "README" "CHANGELOG"))
        (treemacs-create-icon
         :icon (format "  %s\t" (all-the-icons-octicon
                                 "file-binary"
                                 :v-adjust 0
                                 :face '(:inherit font-lock-doc-face :slant normal)))
         :extensions ("exe" "dll" "obj" "so" "o" "out"))
        (treemacs-create-icon
         :icon (format "  %s\t" (all-the-icons-octicon
                                 "file-pdf"
                                 :v-adjust 0
                                 :face '(:inherit font-lock-doc-face :slant normal)))
         :extensions ("pdf"))
        (treemacs-create-icon
         :icon (format "  %s\t" (all-the-icons-octicon
                                 "file-zip"
                                 :v-adjust 0
                                 :face '(:inherit font-lock-doc-face :slant normal)))
         :extensions ("zip" "7z" "tar" "gz" "rar" "tgz"))
        (treemacs-create-icon
         :icon (format "  %s\t" (all-the-icons-octicon
                                 "file-text"
                                 :v-adjust 0
                                 :face '(:inherit font-lock-doc-face :slant normal)))
         :extensions (fallback))))
    (defun aorst/treemacs-expand-all-projects (&optional _)
      "Expand all projects."
      (interactive)
      (save-excursion
        (treemacs--forget-last-highlight)
        (dolist (project (treemacs-workspace->projects (treemacs-current-workspace)))
          (-when-let (pos (treemacs-project->position project))
            (when (eq 'root-node-closed (treemacs-button-get pos :state))
              (goto-char pos)
              (treemacs--expand-root-node pos)))))
      (treemacs--maybe-recenter 'on-distance))
    (defun aorst/treemacs-variable-pitch-labels (&rest _)
      (dolist (face '(treemacs-root-face
                      treemacs-git-unmodified-face
                      treemacs-git-modified-face
                      treemacs-git-renamed-face
                      treemacs-git-ignored-face
                      treemacs-git-untracked-face
                      treemacs-git-added-face
                      treemacs-git-conflict-face
                      treemacs-directory-face
                      treemacs-directory-collapsed-face
                      treemacs-file-face
                      treemacs-tags-face))
        (let ((faces (face-attribute face :inherit nil)))
          (set-face-attribute
           face nil :inherit
           `(variable-pitch ,@(delq 'unspecified (if (listp faces) faces (list faces))))))))
    (defun aorst/treemacs-init-setup ()
      "Set treemacs theme, open treemacs, and expand all projects."
      (treemacs-load-theme "Atom")
      (setq treemacs-collapse-dirs 0)
      (treemacs)
      (aorst/treemacs-expand-all-projects)
      (windmove-right))
    (defun aorst/treemacs-setup ()
      "Set treemacs buffer common settings."
      (setq tab-width 1
            mode-line-format nil
            line-spacing 5)
      (setq-local scroll-step 1)
      (setq-local scroll-conservatively 10000)
      (set-window-fringes nil 0 0 t)
      (aorst/treemacs-variable-pitch-labels))
    (defun aorst/treemacs-setup-fringes ()
      "Set treemacs buffer fringes."
      (set-window-fringes nil 0 0 t)
      (aorst/treemacs-variable-pitch-labels))
    (advice-add #'treemacs-select-window :after #'aorst/treemacs-setup-fringes)
    (defun aorst/treemacs-ignore (file _)
      (or (s-ends-with? ".elc" file)
          (s-ends-with? ".o" file)
          (s-ends-with? ".a" file)
          (string= file ".svn")))
    (add-to-list 'treemacs-ignored-file-predicates #'aorst/treemacs-ignore)
    (defun aorst/treemacs-setup-title ()
      (let ((format '((:eval (concat
                              (make-string
                               (let ((width (window-width)))
                                 (- (/ (if (= (% width 2) 0) width (1+ width)) 2) 5))
                               ?\ )
                              "Treemacs")))))
        (if (version<= emacs-version "27")
            (setq header-line-format format)
          (setq tab-line-format format)))
      (let ((bg (face-attribute 'default :background))
            (fg (face-attribute 'default :foreground))
            (face (if (version<= emacs-version "27")
                      'header-line
                    'tab-line)))
        (face-remap-add-relative face
                                 :box (list :line-width 7 :color bg)
                                 :background bg :foreground fg :height 1.0))))
  (setq treemacs-width 27
        treemacs-is-never-other-window t
        treemacs-space-between-root-nodes nil
        treemacs-indentation 2)
  (treemacs-follow-mode t)
  (treemacs-filewatch-mode t)
  (treemacs-fringe-indicator-mode nil))

(use-package eyebrowse
  :commands eyebrowse-mode
  :init (eyebrowse-mode t))

(use-package minions
  :commands minions-mode
  :init (minions-mode 1))

(use-package uniquify
  :ensure nil
  :config (setq uniquify-buffer-name-style 'forward))

(unless (version< emacs-version "27")
  (use-package tab-line
    :ensure nil
    :hook (after-init . global-tab-line-mode)
    :config
    (defun tab-line-close-tab (&optional e)
      "Close the selected tab.
If tab is presented in another window, close the tab by using `bury-buffer` function.
If tab is uniq to all existing windows, kill the buffer with `kill-buffer` function.
Lastly, if no tabs left in the window, it is deleted with `delete-window` function."
      (interactive "e")
      (let* ((posnp (event-start e))
             (window (posn-window posnp))
             (buffer (get-pos-property 1 'tab (car (posn-string posnp)))))
        (with-selected-window window
          (let ((tab-list (tab-line-tabs-window-buffers))
                (buffer-list (flatten-list
                              (seq-reduce (lambda (list window)
                                            (select-window window t)
                                            (cons (tab-line-tabs-window-buffers) list))
                                          (window-list) nil))))
            (select-window window)
            (if (> (seq-count (lambda (b) (eq b buffer)) buffer-list) 1)
                (progn
                  (if (eq buffer (current-buffer))
                      (bury-buffer)
                    (set-window-prev-buffers window (assq-delete-all buffer (window-prev-buffers)))
                    (set-window-next-buffers window (delq buffer (window-next-buffers))))
                  (unless (cdr tab-list)
                    (ignore-errors (delete-window window))))
              (and (kill-buffer buffer)
                   (unless (cdr tab-list)
                     (ignore-errors (delete-window window)))))))
        (force-mode-line-update)))
    (setq tab-line-new-tab-choice nil
          tab-line-close-button-show nil
          tab-line-separator nil
          tab-line-right-button (propertize (if (char-displayable-p ?▶) " ▶ " " > ")
                                            'keymap tab-line-right-map
                                            'mouse-face 'tab-line-highlight
                                            'help-echo "Click to scroll right")
          tab-line-left-button (propertize (if (char-displayable-p ?◀) " ◀ " " < ")
                                           'keymap tab-line-left-map
                                           'mouse-face 'tab-line-highlight
                                           'help-echo "Click to scroll left"))
    (let ((bg (if (facep 'solaire-default-face)
                  (face-attribute 'solaire-default-face :background)
                (face-attribute 'default :background)))
          (fg (face-attribute 'default :foreground))
          (base (face-attribute 'mode-line :background))
          (box-width 6))
      (set-face-attribute 'tab-line nil :background base :foreground fg :height 1.0 :inherit nil)
      (set-face-attribute 'tab-line-tab nil :foreground fg :background bg :box (list :line-width box-width :color bg) :weight 'normal :inherit nil)
      (set-face-attribute 'tab-line-tab-inactive nil :foreground fg :background base :box (list :line-width box-width :color base) :weight 'normal :inherit nil)
      (set-face-attribute 'tab-line-tab-current nil :foreground fg :background bg :box (list :line-width box-width :color bg) :weight 'normal :inherit nil))
    (dolist (mode '(ediff-mode
                    process-menu-mode
                    term-mode
                    vterm-mode))
      (add-to-list 'tab-line-exclude-modes mode))))

(use-package whitespace
  :ensure nil
  :hook (whitespace-mode . aorst/whitespace-mode-set-faces)
  :config
  (defun aorst/whitespace-mode-set-faces ()
    (let ((fg (face-attribute whitespace-space :foreground)))
      (dolist (face '(whitespace-big-indent
                      whitespace-empty
                      whitespace-hspace
                      whitespace-indentation
                      whitespace-line
                      whitespace-newline
                      whitespace-space
                      whitespace-space-after-tab
                      whitespace-space-before-tab
                      whitespace-tab
                      whitespace-trailing))
        (set-face-attribute face nil :background nil :foreground fg))))
  (setq whitespace-display-mappings '((tab-mark 9 [187 9] [92 9]))))

(use-package display-line-numbers
  :ensure nil
  :config
  (setq display-line-numbers-grow-only t
        display-line-numbers-width-start t))

(use-package org
  :ensure nil
  :defines default-justification
  :hook ((org-mode . flyspell-mode)
         (org-mode . auto-fill-mode)
         (after-save . aorst/org-tangle-on-config-save)
         (org-babel-after-execute . aorst/org-update-inline-images)
         (org-mode . aorst/org-init-setup)
         (ediff-prepare-buffer . outline-show-all)
         ((org-capture-mode org-src-mode) . aorst/discard-history))
  :bind (("C-c a" . org-agenda)
         :map org-mode-map
         ("C-c l" . org-store-link))
  :config
  (use-package ox-latex
    :ensure nil)
  (setq org-startup-with-inline-images t
        org-startup-folded 'content
        org-hide-emphasis-markers t
        org-adapt-indentation nil
        org-hide-leading-stars t
        org-highlight-latex-and-related '(latex)
        revert-without-query '(".*\.pdf")
        org-preview-latex-default-process 'dvisvgm
        org-src-fontify-natively t
        org-preview-latex-image-directory ".ltximg/"
        org-latex-listings 'minted
        org-latex-pdf-process '("pdflatex -shell-escape -interaction nonstopmode -output-directory %o %f"
                                "pdflatex -shell-escape -interaction nonstopmode -output-directory %o %f"
                                "pdflatex -shell-escape -interaction nonstopmode -output-directory %o %f")
        org-confirm-babel-evaluate nil
        org-imenu-depth 8
        org-log-done t
        org-agenda-files '("~/Tasks"))
  (defun aorst/org-tangle-on-config-save ()
    "Tangle source code blocks when configuration file is saved."
    (when (string= buffer-file-name (file-truename "~/.config/emacs/config.org"))
      (org-babel-tangle)))
  (defun aorst/org-update-inline-images ()
    "Update inline images in Org-mode."
    (when org-inline-image-overlays
      (org-redisplay-inline-images)))
  (defun aorst/org-init-setup ()
    "Set buffer local values."
    (setq default-justification 'full))
  (defun aorst/discard-history ()
    "Discard undo history of org src and capture blocks."
    (setq buffer-undo-list nil)
    (set-buffer-modified-p nil))
  (defvar minted-cache-dir
    (file-name-as-directory
     (expand-file-name ".minted/\\jombname"
                       temporary-file-directory)))
  (add-to-list 'org-latex-packages-alist
               `(,(concat "cachedir=" minted-cache-dir)
                 "minted" nil))
  (add-to-list 'org-latex-logfiles-extensions "tex")
  (org-babel-do-load-languages
   'org-babel-load-languages
   '((gnuplot . t)
     (scheme . t)))
  (add-to-list 'org-latex-classes
               '("article"
                 "\\documentclass{article}"
                 ("\\section{%s}" . "\\section*{%s}")
                 ("\\subsection{%s}" . "\\subsection*{%s}")
                 ("\\subsubsection{%s}" . "\\subsubsection*{%s}")
                 ("\\subsubsection{%s}" . "\\subsubsection*{%s}")
                 ("\\subsubsection{%s}" . "\\subsubsection*{%s}")
                 ("\\subsubsection{%s}" . "\\subsubsection*{%s}")
                 ("\\subsubsection{%s}" . "\\subsubsection*{%s}")
                 ("\\subsubsection{%s}" . "\\subsubsection*{%s}")
                 ("\\subsubsection{%s}" . "\\subsubsection*{%s}")
                 ("\\subsubsection{%s}" . "\\subsubsection*{%s}"))))

(use-package doc-view
  :ensure nil
  :config (setq-default doc-view-resolution 192))

(use-package prog-mode
  :ensure nil
  :hook ((prog-mode . show-paren-mode)
         (prog-mode . display-line-numbers-mode)
         (prog-mode . hl-line-mode)))

(use-package cc-mode
  :ensure nil
  :config (defun aorst/cc-mode-setup ()
            (c-set-offset 'case-label '+)
            (setq c-basic-offset 4
                  c-default-style "linux"
                  indent-tabs-mode t
                  tab-width 4))
  :hook ((c-mode-common . aorst/cc-mode-setup)
         (c-mode-common . electric-pair-local-mode)))

(use-package markdown-mode
  :mode (("README\\.md\\'" . gfm-mode)
         ("\\.md\\'" . markdown-mode)
         ("\\.markdown\\'" . markdown-mode))
  :config
  (use-package edit-indirect
    :hook (edit-indirect-after-creation-hook . aorst/real-buffer-setup))
  (defvar markdown-command "multimarkdown")
  (defun aorst/markdown-setup ()
    "Set buffer local variables."
    (setq fill-column 80
          default-justification 'left))
  :hook ((markdown-mode . flyspell-mode)
         (markdown-mode . auto-fill-mode)
         (markdown-mode . aorst/markdown-setup)))

(use-package rust-mode
  :commands (rust-format-buffer)
  :hook (rust-mode . electric-pair-local-mode)
  :bind (:map rust-mode-map
              ("C-c C-f" . rust-format-buffer)))

(when (executable-find "racer")
  (use-package racer
    :hook (racer-mode . eldoc-mode)
    :init (defun org-babel-edit-prep:rust (&optional _babel-info)
            "Run racer mode for Org Babel."
            (racer-mode 1))))

(when (executable-find "cargo")
  (use-package cargo
    :hook ((rust-mode toml-mode) . cargo-minor-mode)))

(use-package toml-mode)

(use-package racket-mode
  :mode ("\\.rkt\\'" . racket-mode)
  :hook (racket-repl-mode . electric-pair-local-mode)
  :bind (:map racket-mode-map
              ("C-c C-d" . racket-run-with-debugging))
  :requires hydra
  :config
  (set-face-attribute 'racket-debug-break-face nil :background (face-attribute 'error :foreground) :foreground (face-attribute 'default :background))
  (set-face-attribute 'racket-debug-result-face nil :foreground (face-attribute 'font-lock-comment-face :foreground) :box nil)
  (set-face-attribute 'racket-debug-locals-face nil :foreground (face-attribute 'font-lock-comment-face :foreground) :box nil)
  (set-face-attribute 'racket-selfeval-face nil :foreground (face-attribute 'default :foreground))
  (defhydra hydrant/racket-debug (:hint nil :color pink)
    "
^Stepping^      ^Moving^                 ^Misc^
^────────^──────^──────^─────────────────^────^─────────────
_s_: step       _c_: continue            _?_: help
_u_: setp-out   _n_: next breakable      _q_: quit debugging
_o_: step-over  _p_: previous breakable  ^ ^
^ ^             _h_: run til point"
    ("s" racket-debug-step)
    ("?" racket-debug-help)
    ("q" racket-debug-disable :exit t)
    ("c" racket-debug-continue)
    ("u" racket-debug-step-out)
    ("o" racket-debug-step-over)
    ("n" racket-debug-next-breakable)
    ("p" racket-debug-prev-breakable)
    ("h" racket-debug-run-to-here)))

(use-package cmake-mode)

(use-package help
  :ensure nil
  :config (setq help-window-select t))

(use-package elisp-mode
  :ensure nil
  :hook (emacs-lisp-mode . eldoc-mode))

(setq use-package-hook-name-suffix "-functions")
(use-package vterm
  :bind (("C-`" . aorst/vterm-toggle)
         ("C-t" . aorst/vterm-focus))
  :hook (vterm-exit . aorst/kill-vterm)
  :config
  (defun aorst/vterm-toggle (&optional arg)
    "Toggle `vterm' window on and off with the same command."
    (interactive "P")
    (let* ((bufname "*vterm*")
           (window (get-buffer-window bufname)))
      (if window
          (ignore-errors (delete-window window))
        (let* ((win-side (if (symbolp arg)
                             (cons (split-window-below) 'bot)
                           (cons (split-window-right) 'right)))
               (window (car win-side))
               (side (cdr win-side)))
          (select-window window)
          (cond ((get-buffer bufname)
                 (switch-to-buffer bufname))
                (t (vterm bufname)))
          (when (bound-and-true-p global-tab-line-mode)
            (previous-buffer)
            (bury-buffer))
          (set-window-dedicated-p window t)
          (set-window-parameter window 'no-delete-other-windows t)
          (set-window-parameter window 'window-side side)
          (set-window-parameter window 'no-other-window t))))
    (defun aorst/vterm-focus (&optional arg)
      "Focus `vterm' or open one if there's none."
      (interactive "P")
      (let ((window (get-buffer-window "*vterm*")))
        (if window
            (select-window window)
          (aorst/vterm-toggle arg))))
    (defun aorst/kill-vterm (buf)
      "Kill the `*vterm*' buffer after shell exits."
      (when buf (kill-buffer buf)))))
(setq use-package-hook-name-suffix "-hook")

(use-package editorconfig
  :commands editorconfig-mode
  :config (editorconfig-mode 1))

(use-package flymake
  :ensure nil
  :config
  (setq flymake-fringe-indicator-position 'right-fringe)
  (remove-hook 'flymake-diagnostic-functions 'flymake-proc-legacy-flymake))

(use-package hydra
  :bind (("<f5>" . hydrant/zoom/body))
  :config (defhydra hydrant/zoom (:hint nil)
            "Scale text"
            ("+" text-scale-increase "in")
            ("-" text-scale-decrease "out")
            ("0" (text-scale-set 0) "reset")))

(use-package geiser
  :hook (scheme-mode . geiser-mode)
  :config (setq geiser-active-implementations '(guile)
                geiser-default-implementation 'guile))

(use-package parinfer
  :commands (parinfer-mode
             parinfer-toggle-mode)
  :hook ((clojure-mode
          emacs-lisp-mode
          common-lisp-mode
          scheme-mode
          lisp-mode
          racket-mode) . parinfer-mode)
  :bind (:map parinfer-mode-map
              ("C-," . parinfer-toggle-mode))
  :config (setq parinfer-extensions
                '(defaults
                   pretty-parens
                   smart-tab
                   smart-yank)))

(use-package ivy
  :commands ivy-mode
  :bind (("C-x C-b" . ivy-switch-buffer)
         ("C-x b" . ivy-switch-buffer))
  :hook ((minibuffer-setup-hook . aorst/minibuffer-defer-garbage-collection)
         (minibuffer-exit-hook . aorst/minibuffer-restore-garbage-collection))
  :config
  (use-package counsel
    :commands (counsel-M-x
               counsel-find-file
               counsel-file-jump
               counsel-recentf
               counsel-rg
               counsel-describe-function
               counsel-describe-variable
               counsel-find-library)
    :config
    (when (executable-find "fd")
      (define-advice counsel-file-jump (:around (foo &optional initial-input initial-directory))
        (let ((find-program "fd")
              (counsel-file-jump-args (split-string "-L --type f --hidden")))
          (funcall foo))))
    (when (executable-find "rg")
      (setq counsel-rg-base-command
            "rg -S --no-heading --hidden --line-number --color never %s .")
      (setenv "FZF_DEFAULT_COMMAND"
              "rg --files --hidden --follow --no-ignore --no-messages --glob '!.git/*' --glob '!.svn/*'"))
    :bind (("M-x" . counsel-M-x)
           ("C-x C-f" . counsel-find-file)
           ("C-x f" . counsel-file-jump)
           ("C-x C-r" . counsel-recentf)
           ("C-x d" . counsel-dired)
           ("C-h f" . counsel-describe-function)
           ("C-h C-f" . counsel-describe-face)
           ("C-h v" . counsel-describe-variable)
           ("C-h l" . counsel-find-library)))
  (setq ivy-re-builders-alist '((t . ivy--regex-fuzzy))
        ivy-count-format ""
        ivy-display-style nil
        ivy-minibuffer-faces nil
        ivy-minibuffer-faces '(default default default default)
        ivy-use-virtual-buffers t
        enable-recursive-minibuffers t)
  :init
  (defun aorst/minibuffer-defer-garbage-collection ()
    "Defer garbage collection for minibuffer"
    (setq gc-cons-threshold most-positive-fixnum))
  (defun aorst/minibuffer-restore-garbage-collection ()
    "Resotre garbage collection settings."
    (run-at-time
     1 nil (lambda () (setq gc-cons-threshold aorst--gc-cons-threshold))))
  (ivy-mode 1))

(use-package company
  :commands global-company-mode
  :bind (:map company-active-map
              ("TAB" . company-complete-common-or-cycle)
              ("<tab>" . company-complete-common-or-cycle)
              ("<S-Tab>" . company-select-previous)
              ("<backtab>" . company-select-previous)
              ("C-n" . company-select-next)
              ("C-p" . company-select-previous))
  :hook (after-init . global-company-mode)
  :config
  (setq company-require-match 'never
        company-minimum-prefix-length 3
        company-tooltip-align-annotations t
        company-frontends '(company-pseudo-tooltip-unless-just-one-frontend
                            company-preview-frontend
                            company-echo-metadata-frontend)
        company-backends '(company-capf company-files)))

(use-package company-flx
  :after company
  :config
  (company-flx-mode +1))

(use-package company-quickhelp
  :after company
  :config
  (company-quickhelp-mode)
  (setq company-quickhelp-use-propertized-text t))

(use-package undo-tree
  :commands global-undo-tree-mode
  :init (global-undo-tree-mode 1))

(use-package yasnippet
  :commands yas-reload-all
  :hook ((rust-mode
          c-mode-common
          racket-mode). yas-minor-mode)
  :config
  (use-package yasnippet-snippets)
  (add-to-list 'yas-key-syntaxes 'yas-longest-key-from-whitespace)
  (yas-reload-all))

(use-package magit
  :hook ((git-commit-mode . flyspell-mode))
  :bind (("<f12>" . magit-status))
  :config (setq magit-ediff-dwim-show-on-hunks t))

(use-package ediff
  :ensure nil
  :hook ((ediff-before-setup . aorst/store-pre-ediff-winconfig)
         (ediff-quit . aorst/restore-pre-ediff-winconfig)
         (ediff-keymap-setup . aorst/ediff-setup-keys))
  :config
  (advice-add 'ediff-window-display-p :override #'ignore)
  (setq ediff-split-window-function 'split-window-horizontally)
  :init
  (defvar aorst--ediff-last-windows nil
    "Stores window configuration before `ediff' was invoked.")
  (defun aorst/store-pre-ediff-winconfig ()
    (setq aorst--ediff-last-windows (current-window-configuration)))
  (defun aorst/restore-pre-ediff-winconfig ()
    (set-window-configuration aorst--ediff-last-windows))
  (defun aorst/ediff-copy-both-to-C ()
    (interactive)
    (ediff-copy-diff ediff-current-difference nil 'C nil
                     (concat
                      (ediff-get-region-contents ediff-current-difference 'A ediff-control-buffer)
                      (ediff-get-region-contents ediff-current-difference 'B ediff-control-buffer))))
  (defun aorst/ediff-setup-keys ()
    (define-key ediff-mode-map "d" #'aorst/ediff-copy-both-to-C)))

(use-package multiple-cursors
  :commands (mc/cycle-backward
             mc/cycle-forward)
  :bind (("S-<mouse-1>" . mc/add-cursor-on-click)
         ("C-c m" . hydrant/mc/body))
  :config
  (use-package mc-extras)
  (defhydra hydrant/mc (:hint nil :color pink)
    "
^Select^                 ^Discard^                     ^Move^
^──────^─────────────────^───────^─────────────────────^────^─────────────
_M-s_: split lines       _M-SPC_: discard current      _&_: align
_s_:   select regexp     _b_:     discard blank lines  _(_: cycle backward
_n_:   select next       _d_:     remove duplicated    _)_: cycle forward
_p_:   select previous   _q_:     exit                 ^ ^
_C_:   select next line"
    ("M-s" mc/edit-ends-of-lines)
    ("s" mc/mark-all-in-region-regexp)
    ("n" mc/mark-next-like-this-word)
    ("p" mc/mark-previous-like-this-word)
    ("&" mc/vertical-align-with-space)
    ("(" mc/cycle-backward)
    (")" mc/cycle-forward)
    ("M-SPC" mc/remove-current-cursor)
    ("b" mc/remove-cursors-on-blank-lines)
    ("d" mc/remove-duplicated-cursors)
    ("C" mc/mark-next-lines)
    ("q" mc/remove-duplicated-cursors :exit t)))

(use-package expand-region
  :commands (er/expand-region
             er/mark-paragraph
             er/mark-inside-pairs
             er/mark-outside-pairs
             er/mark-inside-quotes
             er/mark-outside-quotes
             er/contract-region)
  :bind (("C-c e" . hydrant/er/body))
  :config (defhydra hydrant/er (:hint nil)
            "
^Expand^            ^Mark^
^──────^────────────^────^────────────
_e_: expand region  _(_: inside pairs
_-_: reduce region  _)_: around pairs
^ ^                 _q_: inside quotes
^ ^                 _Q_: around quotes
^ ^                 _p_: paragraph"
            ("e" er/expand-region :color pink)
            ("-" er/contract-region :color pink)
            ("p" er/mark-paragraph)
            ("(" er/mark-inside-pairs)
            (")" er/mark-outside-pairs)
            ("q" er/mark-inside-quotes)
            ("Q" er/mark-outside-quotes)))

(use-package phi-search
  :config
  (set-face-attribute 'phi-search-selection-face nil :inherit 'isearch)
  (set-face-attribute 'phi-search-match-face nil :inherit 'region))

(when (or (executable-find "clangd")
          (executable-find "rls"))
  (use-package eglot
    :hook ((rust-mode . aorst/configure-and-start-rls)
           ((c-mode c++-mode) . eglot-ensure))
    :bind (:map eglot-mode-map
                ("C-c C-e" . aorst/eglot-menu))
    :requires transient
    :init
    (defun aorst/configure-and-start-rls ()
      "Configure RLS via `eglot-workspace-configuration' variable and start eglot."
      (interactive)
      (setq eglot-workspace-configuration '((:rust . (:clippy_preference "on"))))
      (eglot-ensure))
    :config
    (add-to-list 'eglot-server-programs '((c++-mode c-mode) . ("clangd" "--log=error" "--background-index=false")))
    (add-to-list 'eglot-ignored-server-capabilites :documentHighlightProvider)
    (setq eglot-events-buffer-size 0)
    (define-transient-command aorst/eglot-menu ()
      "Hideshow commands."
      [:description
       "Find"
       ("d" "declaration" eglot-find-declaration)
       ("i" "implementation" eglot-find-implementation)
       ("t" "type definition" eglot-find-typeDefinition)]
      [:description
       "Commands"
       ("r" "rename" eglot-rename)
       ("f" "format" eglot-format)
       ("a" "code actions" eglot-code-actions)
       ("h" "help" eglot-help-at-point)]
      [:description
       "Management"
       ("R" "reconnect" eglot-reconnect)
       ("S" "shutdown" eglot-shutdown)]
      (interactive)
      (when (bound-and-true-p eglot--managed-mode)
        (transient-setup 'aorst/eglot-menu nil nil)))))

(use-package project
  :ensure nil
  :bind (("C-c p f" . project-find-file)
         ("C-c p r" . project-find-regexp))
  :config
  (defvar project-root-markers '("Cargo.toml" "compile_commands.json" "compile_flags.txt")
    "Files or directories that indicate the root of a project.")
  (defun aorst/project-find-root (path)
    "Tail-recursive search in PATH for root markers."
    (let* ((this-dir (file-name-as-directory (file-truename path)))
           (parent-dir (expand-file-name (concat this-dir "../")))
           (system-root-dir (expand-file-name "/")))
      (cond
       ((aorst/project-root-p this-dir) (cons 'transient this-dir))
       ((equal system-root-dir this-dir) nil)
       (t (aorst/project-find-root parent-dir)))))
  (defun aorst/project-root-p (path)
    "Check if current PATH has any of project root markers."
    (let ((results (mapcar (lambda (marker)
                             (file-exists-p (concat path marker)))
                           project-root-markers)))
      (eval `(or ,@ results))))
  (add-to-list 'project-find-functions #'aorst/project-find-root))

(use-package clang-format
  :after cc-mode
  :bind (:map c-mode-base-map
              ("C-c C-f" . clang-format-buffer)
              ("C-c C-S-f" . clang-format-region)))

(use-package gcmh
  :commands gcmh-mode
  :init (gcmh-mode 1))

(use-package vlf-setup
  :ensure vlf
  :config (setq vlf-application 'dont-ask))

(use-package imenu-list
  :defines imenu-list-idle-update-delay-time
  :bind (("<f9>" . imenu-list-smart-toggle)
         ("<f10>". imenu-list-show))
  :config
  (defun aorst/imenu-list-setup ()
    "Setings for imenu-list"
    (setq window-size-fixed 'width
          mode-line-format nil)
    (when (and (not (version<= emacs-version "27"))
               (boundp 'tab-line-format))
      (setq tab-line-format nil))
    (set-window-parameter (get-buffer-window (current-buffer)) 'no-other-window t))
  (advice-add 'imenu-list-smart-toggle :after-while #'aorst/imenu-list-setup)
  (setq imenu-list-idle-update-delay-time 0.1
        imenu-list-size 27
        imenu-list-focus-after-activation t))

(use-package dumb-jump
  :bind (("M-g o" . dumb-jump-go-other-window)
         ("M-g j" . dumb-jump-go))
  :config
  (setq dumb-jump-selector 'ivy)
  (when (executable-find "rg")
    (setq dumb-jump-force-searcher 'rg)))

(use-package server
  :ensure nil
  :config
  (unless (server-running-p)
    (server-start)))

(use-package eldoc-box
  ;:hook (eldoc-mode . aorst/eldoc-box-enable)
  :config
  (setq eldoc-box-max-pixel-width 1920
        eldoc-box-max-pixel-height 1080)
  (set-face-attribute 'eldoc-box-border nil :background (face-attribute 'mode-line-inactive :background))
  :init
  (defun aorst/eldoc-box-enable ()
    "Helper function that enables `eldoc-box-hover-at-point-mode' for real buffers only."
    (interactive)
    (when (aorst/real-buffer-p)
      (eldoc-box-hover-at-point-mode))))

(when window-system
  (use-package which-key
    :config
    (which-key-mode t)))

(use-package iedit
  :bind ("C-c n" . aorst/iedit-current-or-expand)
  :config
  (setq iedit-toggle-key-default "")
  (defun aorst/iedit-current-or-expand (&optional arg)
    "Select only current occurrence with `iedit-mode'.  Expand to
next occurrence if `iedit-mode' is already active."
    (interactive "P")
    (if (bound-and-true-p iedit-mode)
        (if (symbolp arg)
            (iedit-expand-down-to-occurrence)
          (iedit-expand-up-to-occurrence))
      (iedit-mode 1))))

(use-package wgrep)

(use-package hideshow
  :ensure nil
  :requires transient
  :hook (prog-mode . hs-minor-mode)
  :bind (:map prog-mode-map
              ("<f6>" . aorst/hideshow-menu))
  :config
  (define-transient-command aorst/hideshow-menu ()
    "Hideshow commands."
    [:description
     "Hide"
     ("ha" "all" hs-hide-all)
     ("hb" "block" hs-hide-block)]
    [:description
     "Show"
     ("sa" "all" hs-show-all)
     ("sb" "block" hs-show-block)]
    (interactive)
    (when (bound-and-true-p hs-minor-mode)
      (transient-setup 'aorst/hideshow-menu nil nil))))

(use-package desktop
  :ensure nil
  :hook ((after-init . aorst/desktop-restore)
         (desktop-after-read . aorst/desktop-remove))
  :init
  (setq desktop-path '("~/.config/emacs/")
        desktop-dirname "~/.config/emacs/"
        desktop-base-file-name "emacs-desktop"
        desktop-save t
        desktop-load-locked-desktop t)
  (defun aorst/desktop-remove ()
    "Remove current desktop, but save `desktop-dirname'."
    (let ((desktop desktop-dirname))
      (desktop-remove)
      (setq desktop-dirname desktop)))
  (defun aorst/saved-desktop-p ()
    "Check if desktop exists."
    (file-exists-p (concat desktop-dirname "/" desktop-base-file-name)))
  (defun aorst/desktop-restore ()
    "Restore a saved emacs session."
    (interactive)
    (if (aorst/saved-desktop-p)
        (desktop-read)
      (message "No desktop found.")))
  (defun aorst/desktop-save ()
    "Save an emacs session."
    (interactive)
    (when (aorst/saved-desktop-p)
      (desktop-save-in-desktop-dir))
    (message "Session not saved.")
    (desktop-save-in-desktop-dir))
  (defun aorst/desktop-auto-save ()
    "Automatically save desktop."
    (when (eq (desktop-owner) (emacs-pid))
      (aorst/desktop-save)))
  (desktop-save-mode t))

(provide 'init)
;;; init.el ends here
